[{"E:\\social network git\\-social-network\\social network\\src\\index.tsx":"1","E:\\social network git\\-social-network\\social network\\src\\reportWebVitals.ts":"2","E:\\social network git\\-social-network\\social network\\src\\App.tsx":"3","E:\\social network git\\-social-network\\social network\\src\\Redax\\redux-store.tsx":"4","E:\\social network git\\-social-network\\social network\\src\\component\\Login\\Login.tsx":"5","E:\\social network git\\-social-network\\social network\\src\\component\\Navbar\\Navbar.tsx":"6","E:\\social network git\\-social-network\\social network\\src\\Redax\\dialogsPage-reducer.ts":"7","E:\\social network git\\-social-network\\social network\\src\\Redax\\auth-reducer.ts":"8","E:\\social network git\\-social-network\\social network\\src\\Redax\\users-reducer.ts":"9","E:\\social network git\\-social-network\\social network\\src\\Redax\\profile-reducer.ts":"10","E:\\social network git\\-social-network\\social network\\src\\component\\Users\\UsersContainer.tsx":"11","E:\\social network git\\-social-network\\social network\\src\\component\\Header\\HeaderContanier.tsx":"12","E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\DialogsContainer.tsx":"13","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\ProfileContanier.tsx":"14","E:\\social network git\\-social-network\\social network\\src\\api\\api.js":"15","E:\\social network git\\-social-network\\social network\\src\\component\\Header\\Header.tsx":"16","E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\Dialogs.tsx":"17","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\Profile.tsx":"18","E:\\social network git\\-social-network\\social network\\src\\component\\Users\\Users.tsx":"19","E:\\social network git\\-social-network\\social network\\src\\component\\commen\\preloader\\Preloader.tsx":"20","E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\Message\\Message.tsx":"21","E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\DialogItem\\DialogsItem.tsx":"22","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\Myposts\\MyPostsContainer.tsx":"23","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\ProfileInfo\\ProfileInfo.tsx":"24","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\Myposts\\MyPosts.tsx":"25","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\Myposts\\Post\\Post.tsx":"26","E:\\social network git\\-social-network\\social network\\src\\HOC\\withAuthRedirect.tsx":"27","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\ProfileInfo\\ProfileStatus.tsx":"28","E:\\social network git\\-social-network\\social network\\src\\utils\\validators\\validators.ts":"29","E:\\social network git\\-social-network\\social network\\src\\component\\commen\\Preloader\\Preloader.tsx":"30","E:\\social network git\\-social-network\\social network\\src\\component\\commen\\FormControls\\FormControls.tsx":"31","E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\AddMessageForm\\AddMessageForm.tsx":"32","E:\\social network git\\-social-network\\social network\\src\\Redax\\app-reducer.ts":"33","E:\\social network git\\-social-network\\social network\\src\\Redax\\users-selectors.ts":"34","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\ProfileInfo\\ProfileStatusWithHooks.tsx":"35"},{"size":730,"mtime":1632759974197,"results":"36","hashOfConfig":"37"},{"size":440,"mtime":1628889227906,"results":"38","hashOfConfig":"37"},{"size":1909,"mtime":1632829770651,"results":"39","hashOfConfig":"37"},{"size":1093,"mtime":1632756227931,"results":"40","hashOfConfig":"37"},{"size":1990,"mtime":1631717829309,"results":"41","hashOfConfig":"37"},{"size":1105,"mtime":1628889227897,"results":"42","hashOfConfig":"37"},{"size":1105,"mtime":1632907421093,"results":"43","hashOfConfig":"37"},{"size":2249,"mtime":1632830758637,"results":"44","hashOfConfig":"37"},{"size":5655,"mtime":1632903125325,"results":"45","hashOfConfig":"37"},{"size":3814,"mtime":1632905016973,"results":"46","hashOfConfig":"37"},{"size":2944,"mtime":1633247821897,"results":"47","hashOfConfig":"37"},{"size":1047,"mtime":1632830758674,"results":"48","hashOfConfig":"37"},{"size":1106,"mtime":1632762581621,"results":"49","hashOfConfig":"37"},{"size":1838,"mtime":1632830758552,"results":"50","hashOfConfig":"37"},{"size":1186,"mtime":1630942334124,"results":"51","hashOfConfig":"37"},{"size":785,"mtime":1632830758690,"results":"52","hashOfConfig":"37"},{"size":1414,"mtime":1630921465379,"results":"53","hashOfConfig":"37"},{"size":696,"mtime":1632829134535,"results":"54","hashOfConfig":"37"},{"size":2858,"mtime":1629788095675,"results":"55","hashOfConfig":"37"},{"size":244,"mtime":1628889227904,"results":"56","hashOfConfig":"37"},{"size":255,"mtime":1628889227895,"results":"57","hashOfConfig":"37"},{"size":434,"mtime":1628889227893,"results":"58","hashOfConfig":"37"},{"size":856,"mtime":1632831279167,"results":"59","hashOfConfig":"37"},{"size":1201,"mtime":1633317129848,"results":"60","hashOfConfig":"37"},{"size":1865,"mtime":1632831279182,"results":"61","hashOfConfig":"37"},{"size":515,"mtime":1628889227899,"results":"62","hashOfConfig":"37"},{"size":795,"mtime":1629813907298,"results":"63","hashOfConfig":"37"},{"size":1625,"mtime":1629911255776,"results":"64","hashOfConfig":"37"},{"size":307,"mtime":1630916831792,"results":"65","hashOfConfig":"37"},{"size":244,"mtime":1628889227904,"results":"66","hashOfConfig":"37"},{"size":1404,"mtime":1630922728007,"results":"67","hashOfConfig":"37"},{"size":884,"mtime":1630921465368,"results":"68","hashOfConfig":"37"},{"size":967,"mtime":1632904087813,"results":"69","hashOfConfig":"37"},{"size":1088,"mtime":1633248063417,"results":"70","hashOfConfig":"37"},{"size":1121,"mtime":1633318926525,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1tw51aq",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"74"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"74"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"74"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\social network git\\-social-network\\social network\\src\\index.tsx",[],["157","158"],"E:\\social network git\\-social-network\\social network\\src\\reportWebVitals.ts",[],"E:\\social network git\\-social-network\\social network\\src\\App.tsx",["159"],"import React from 'react';\r\nimport {Route, withRouter} from \"react-router-dom\";\r\nimport './App.css';\r\nimport Navbar from \"./component/Navbar/Navbar\";\r\nimport DialogsContainer from \"./component/Dialogs/DialogsContainer\";\r\nimport UsersContainer from \"./component/Users/UsersContainer\";\r\nimport ProfileContainer from \"./component/Profile/ProfileContanier\";\r\nimport HeaderContainer from \"./component/Header/HeaderContanier\";\r\nimport Login from \"./component/Login/Login\";\r\nimport {connect} from 'react-redux';\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./Redax/app-reducer\";\r\nimport {AppStateType} from \"./Redax/redux-store\";\r\nimport Preloader from \"./component/commen/Preloader/Preloader\";\r\n\r\ntype MapDispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\ntype MapStatePropsType = {\r\n    initialize: boolean\r\n}\r\ntype AppPropsType = MapDispatchPropsType & MapStatePropsType\r\n\r\nclass App extends React.Component<AppPropsType> {\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialize) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <div className={'app-wrapper'}>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n\r\n                <div className={'app-wrapper-content'}>\r\n                    <Route path={'/dialogs'} render={() => <DialogsContainer/>}/>\r\n                    <Route path={'/profile/:userId?'} render={() => <ProfileContainer/>}/>\r\n                    <Route path={'/users'} render={() => <UsersContainer/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                </div>\r\n            </div> \r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType):MapStatePropsType => ({\r\n    initialize: state.app.initialized\r\n})\r\n\r\nexport default compose(\r\n    /*withRouter,*/\r\n    connect(mapStateToProps, {initializeApp})(App));\r\n","E:\\social network git\\-social-network\\social network\\src\\Redax\\redux-store.tsx",["160"],"import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer, {addPostAC, setStatus, setUsersProfile} from \"./profile-reducer\";\r\nimport dialogsPageReducer, {AddMessageAC} from \"./dialogsPage-reducer\";\r\nimport React from \"react\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {reducer as formReducer} from \"redux-form\"\r\nimport AppReducer from \"./app-reducer\";\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsPageReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form:formReducer,\r\n    app:AppReducer,\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport type Types =\r\n    ReturnType<typeof addPostAC>\r\n    | ReturnType<typeof AddMessageAC>\r\n    | ReturnType<typeof setUsersProfile>\r\n    | ReturnType<typeof setStatus>\r\n// @ts-ignore\r\nwindow.store = store;\r\nexport default store;\r\n\r\n\r\n\r\n","E:\\social network git\\-social-network\\social network\\src\\component\\Login\\Login.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Navbar\\Navbar.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\Redax\\dialogsPage-reducer.ts",[],"E:\\social network git\\-social-network\\social network\\src\\Redax\\auth-reducer.ts",["161"],"import React from \"react\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\n\r\nexport type AuthTypeAC = ReturnType<typeof setAuthUserData>\r\n\r\n\r\nexport type InitialAuthStateType = {\r\n    id: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean,\r\n}\r\n\r\nlet initialState: InitialAuthStateType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n}\r\n\r\nconst AuthReducer = (state:InitialAuthStateType = initialState, action:AuthTypeAC)\r\n    : InitialAuthStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\n//action\r\nexport const setAuthUserData =\r\n    (id: null | number, email: null | string, login: null | string, isAuth: boolean) =>\r\n        ({type: SET_USER_DATA, payload: {id, email, login, isAuth}} as const)\r\n\r\n//thunks\r\nexport const getAuthUserData = () => (dispatch: Dispatch<AuthTypeAC>) => {\r\n   return authAPI.me()\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                let {id, email, login} = response.data.data\r\n                dispatch(setAuthUserData(id, email, login, true))\r\n            }\r\n        })\r\n}\r\nexport const LoginTC = (email: string, password: string, rememberMe: boolean) => (dispatch: any) => {\r\n    dispatch(stopSubmit('login', {_error: 'Common error'}))\r\n    authAPI.login(email, password, rememberMe)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(getAuthUserData())\r\n            } else {\r\n                let message = response.data.messages.length > 0 ? response.data.messages[0]: 'Some error'\r\n                dispatch(stopSubmit('login', {_error: message}))\r\n            }\r\n        })\r\n}\r\nexport const Logout = () => (dispatch: Dispatch) => {\r\n    authAPI.logout()\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setAuthUserData(null, null, null, false))\r\n            }\r\n        })\r\n}\r\n\r\nexport default AuthReducer;","E:\\social network git\\-social-network\\social network\\src\\Redax\\users-reducer.ts",["162","163"],"import React from \"react\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/api\";\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_TOTAL_COUNT_PAGE = 'SET_TOTAL_COUNT_PAGE'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\nexport type UsersTypeAC =\r\n    ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n\r\ntype LocationType = {\r\n    city: string,\r\n    country: string,\r\n}\r\ntype PhotosType = {\r\n    small: string,\r\n    large: string,\r\n}\r\nexport type UserType = {\r\n    id: number,\r\n    photos: PhotosType,\r\n    name: string,\r\n    status: string,\r\n    followed: boolean,\r\n    location: LocationType,\r\n    uniqueUrlName: null,\r\n}\r\n/*export type InitialStateType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<number>,\r\n}*/\r\n\r\nlet initialState = {\r\n    users: [] as UserType[],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as number[],\r\n}\r\nexport type InitialStateType = typeof initialState\r\n//React.Reducer<InitialStateType, UsersTypeAC>\r\nconst usersReducer = (state: InitialStateType = initialState, action: UsersTypeAC): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {\r\n                            ...u,\r\n                            followed: true\r\n                        }\r\n                    } else {\r\n                        return u\r\n                    }\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {\r\n                            ...u,\r\n                            followed: false\r\n                        }\r\n                    } else {\r\n                        return u\r\n                    }\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state, currentPage: action.currentPage\r\n            }\r\n        case SET_TOTAL_COUNT_PAGE:\r\n            return {\r\n                ...state, totalUsersCount: action.totalCount\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId: number) => {\r\n    return {type: FOLLOW, userId} as const\r\n}\r\nexport const unfollowSuccess = (userId: number) => {\r\n    return {type: UNFOLLOW, userId} as const\r\n}\r\nexport const setUsers = (users: UserType[]) => {\r\n    return {type: SET_USERS, users} as const\r\n}\r\nexport const setCurrentPage = (page: number) => {\r\n    return {type: SET_CURRENT_PAGE, currentPage: page} as const\r\n}\r\nexport const setTotalUsersCount = (totalCount: number) => {\r\n    return {type: SET_TOTAL_COUNT_PAGE, totalCount} as const\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {type: TOGGLE_IS_FETCHING, isFetching} as const\r\n}\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => {\r\n    return {type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId} as const\r\n}\r\n\r\n\r\nexport const requestUsers = (page: number, pageSize: number) => {\r\n\r\n    return (dispatch: Dispatch<UsersTypeAC>) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(page))\r\n        usersAPI.getUsers(page, pageSize)\r\n            .then(data => {\r\n                dispatch(toggleIsFetching(false))\r\n                dispatch(setUsers(data.items))\r\n                dispatch(setTotalUsersCount(data.totalCount))\r\n            })\r\n    }\r\n}\r\n\r\nexport const follow = (userId: number) => {\r\n    return (dispatch: Dispatch<UsersTypeAC>) => {\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        usersAPI.follow(userId)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(followSuccess(userId))\r\n                }\r\n                dispatch(toggleFollowingProgress(false, userId))\r\n            })\r\n    }\r\n}\r\nexport const unfollow = (userId: number) => {\r\n    return (dispatch: Dispatch<UsersTypeAC>) => {\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        usersAPI.unfollow(userId)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(unfollowSuccess(userId))\r\n                }\r\n                dispatch(toggleFollowingProgress(false, userId))\r\n            })\r\n    }\r\n}\r\nexport default usersReducer;","E:\\social network git\\-social-network\\social network\\src\\Redax\\profile-reducer.ts",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Users\\UsersContainer.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Header\\HeaderContanier.tsx",["164"],"import React from 'react';\r\nimport Header from './Header';\r\nimport {connect} from \"react-redux\";\r\nimport {InitialAuthStateType, Logout, setAuthUserData} from \"../../Redax/auth-reducer\";\r\nimport {AppStateType} from \"../../Redax/redux-store\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    // auth: InitialAuthStateType\r\n    login: string | null,\r\n    isAuth:boolean,\r\n}\r\ntype MapDispatchToPropsType = {\r\n    setAuthUserData: (id: null | number, email: null | string, login: null | string, isAuth: boolean) => void,\r\n    // getAuthUserData: () => void\r\n}\r\n\r\ntype HeaderContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nclass HeaderContainer extends React.Component <HeaderContainerPropsType> {\r\n    render() {\r\n        return (\r\n            <Header {...this.props} logout={Logout}/>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    login: state.auth.login,\r\n    isAuth:state.auth.isAuth,\r\n})\r\n\r\nexport default connect(mapStateToProps, {setAuthUserData, Logout})(HeaderContainer);\r\n","E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\DialogsContainer.tsx",["165"],"import React from 'react';\r\nimport {AddMessageAC} from \"../../Redax/dialogsPage-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType, Types} from \"../../Redax/redux-store\";\r\nimport WithAuthRedirect from \"../../HOC/withAuthRedirect\";\r\nimport { compose } from 'redux';\r\n\r\ntype DialogDataType = {\r\n    id: number,\r\n    name: string,\r\n}\r\nexport type MessageType = {\r\n    id: number,\r\n    message: string,\r\n}\r\nexport type dialogsPageType = {\r\n    MessageData: MessageType[],\r\n    DialogData: DialogDataType[],\r\n    newMessage: string,\r\n}\r\ntype MapStateToPropsType={\r\n    dialogsPage:dialogsPageType,\r\n}\r\nconst mapStateToProps=(state:AppStateType):MapStateToPropsType=>{\r\n    return{\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nconst mapDispatchToProps=(dispatch:(action: Types) => void)=>{\r\n    return{\r\n        sendMessage:(newMessageBody:string)=>{\r\n            dispatch(AddMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(/*WithAuthRedirect,*/connect(mapStateToProps,mapDispatchToProps))(Dialogs);\r\n\r\n\r\n","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\ProfileContanier.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\api\\api.js",[],["166","167"],"E:\\social network git\\-social-network\\social network\\src\\component\\Header\\Header.tsx",["168"],"import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport c from './Header.module.css';\r\n\r\ntype HeaderPropsType={\r\n    login: string | null,\r\n    isAuth:boolean,\r\n    logout:()=>void\r\n}\r\nconst Header:React.FC<HeaderPropsType> = (props) => {\r\n    return (\r\n        <div className={c.header}>\r\n            <img\r\n                src={'https://st.depositphotos.com/2321413/3088/v/600/depositphotos_30889807-stock-illustration-simple-social-media-icon.jpg'}/>\r\n            <div className={c.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>{props.login}- <button onClick={props.logout}>Log out</button></div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Header;\r\n","E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\Dialogs.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\Profile.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Users\\Users.tsx",["169"],"import React from 'react';\r\nimport s from './Users.module.css'\r\nimport userPhoto from \"../../assets/images/User-Profile.png\"\r\nimport {UserType} from \"../../Redax/users-reducer\";\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype UsersPropsType = {\r\n    onPageChanged: (currentPage: number) => void,\r\n    totalUsersCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    users: Array<UserType>,\r\n    follow: (userId: number) => void,\r\n    unfollow: (userId: number) => void,\r\n    followingInProgress: Array<number>,\r\n}\r\n\r\nconst Users = (props: UsersPropsType) => {\r\n\r\n    const pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    const pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                {pages.map(p => {\r\n                    return (\r\n                        <span className={props.currentPage === p ? s.selected : ''}\r\n                              onClick={(e) => {\r\n                                  props.onPageChanged(p)\r\n                              }}>\r\n                                {p}\r\n                            </span>\r\n                    )\r\n                })}\r\n            </div>\r\n            {\r\n                props.users.map(u => <div key={u.id}>\r\n                        <div>\r\n                            <div>\r\n                                <NavLink to={'/profile/' + u.id}>\r\n                                    <img src={u.photos.small != null ? u.photos.small : userPhoto}\r\n                                         className={s.userPhoto}/>\r\n                                </NavLink>\r\n                            </div>\r\n                            <div>{u.followed\r\n                                ? <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                          onClick={() => {\r\n                                              props.unfollow(u.id)\r\n                                          }}>\r\n                                    Unfollow</button>\r\n                                : <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                          onClick={() => props.follow(u.id)}>\r\n                                    Follow</button>\r\n                            }\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div>{u.name}</div>\r\n                            <div>{u.status}</div>\r\n                        </div>\r\n                        <div>\r\n                            <div>{\"u.location.country\"}</div>\r\n                            <div>{\"u.location.city\"}</div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Users;","E:\\social network git\\-social-network\\social network\\src\\component\\commen\\preloader\\Preloader.tsx",["170"],"import React from 'react';\r\nimport preloader from '../../../assets/images/Preloader.gif';\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div>\r\n            <img src={preloader}/>\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default Preloader;",["171","172"],"E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\Message\\Message.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\DialogItem\\DialogsItem.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\Myposts\\MyPostsContainer.tsx",["173"],"import React from 'react';\r\nimport {addPostAC} from \"../../../Redax/profile-reducer\";\r\nimport MyPosts, {PostsDataType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Types} from \"../../../Redax/redux-store\";\r\nimport { RootStateType} from \"../../../Redax/store\";\r\n\r\n\r\ntype MapStateToPropsType={\r\n    PostsData:Array<PostsDataType>,\r\n    newPostText:string,\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType):MapStateToPropsType => {\r\n    return {\r\n        PostsData: state.profilePage.PostsData,\r\n        newPostText: state.profilePage.messageNewPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: (action: Types) => void) => {\r\n    return {\r\n        addPost: (postMessage: string) => {\r\n            dispatch(addPostAC(postMessage))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n\r\n","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\ProfileInfo\\ProfileInfo.tsx",["174","175"],"E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\Myposts\\MyPosts.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\Myposts\\Post\\Post.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\HOC\\withAuthRedirect.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\ProfileInfo\\ProfileStatus.tsx",["176"],"import React, {ChangeEvent} from \"react\";\r\n\r\nimport c from './ProfileInfo.module.css'\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}\r\ntype LocalStateType = {\r\n    editMode: boolean,\r\n    status: string,\r\n}\r\n\r\nexport class ProfileStatus extends React.Component<ProfileStatusPropsType> {\r\n    state: LocalStateType = {\r\n        editMode: false,\r\n        status: this.props.status,\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true,\r\n        })\r\n    }\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false,\r\n        })\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ProfileStatusPropsType, prevState: LocalStateType) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({status: this.state.status})\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    {!this.state.editMode &&\r\n                    <span onDoubleClick={this.activateEditMode}>{this.props.status || '----'}</span>}\r\n                </div>\r\n                <div>\r\n                    {this.state.editMode &&\r\n                    <input onChange={this.onStatusChange} autoFocus onBlur={this.deactivateEditMode}\r\n                           value={this.state.status}/>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","E:\\social network git\\-social-network\\social network\\src\\utils\\validators\\validators.ts",[],"E:\\social network git\\-social-network\\social network\\src\\component\\commen\\Preloader\\Preloader.tsx",["177"],"E:\\social network git\\-social-network\\social network\\src\\component\\commen\\FormControls\\FormControls.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\AddMessageForm\\AddMessageForm.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\Redax\\app-reducer.ts",[],"E:\\social network git\\-social-network\\social network\\src\\Redax\\users-selectors.ts",["178"],"import { createSelector } from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {UserType} from \"./users-reducer\";\r\n\r\n\r\n\r\n//reselect\r\n/*export const getUsersSelector = (state: AppStateType): Array<UserType> => {\r\n    return getUsers(state).filter(u=>true)\r\n}\r\nexport const getUsersSuper = createSelector(getUsers,getIsFetching(users,isFetching)=>{\r\n    users.filter(u=>true)\r\n})*/\r\n\r\n//selectors\r\nexport const getUsers = (state: AppStateType): Array<UserType> => {\r\n    return state.usersPage.users\r\n}\r\nexport const getCurrentPage = (state: AppStateType): number => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getPageSize = (state: AppStateType): number => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getIsFetching = (state: AppStateType): boolean => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType): number => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType): Array<number> => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\ProfileInfo\\ProfileStatusWithHooks.tsx",["179"],{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","severity":1,"message":"185","line":2,"column":16,"nodeType":"186","messageId":"187","endLine":2,"endColumn":26},{"ruleId":"184","severity":1,"message":"188","line":4,"column":8,"nodeType":"186","messageId":"187","endLine":4,"endColumn":13},{"ruleId":"184","severity":1,"message":"188","line":1,"column":8,"nodeType":"186","messageId":"187","endLine":1,"endColumn":13},{"ruleId":"184","severity":1,"message":"188","line":1,"column":8,"nodeType":"186","messageId":"187","endLine":1,"endColumn":13},{"ruleId":"189","severity":1,"message":"190","line":111,"column":65,"nodeType":"191","messageId":"192","endLine":111,"endColumn":67},{"ruleId":"184","severity":1,"message":"193","line":4,"column":9,"nodeType":"186","messageId":"187","endLine":4,"endColumn":29},{"ruleId":"184","severity":1,"message":"194","line":6,"column":8,"nodeType":"186","messageId":"187","endLine":6,"endColumn":24},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"195","severity":1,"message":"196","line":13,"column":13,"nodeType":"197","endLine":14,"endColumn":145},{"ruleId":"195","severity":1,"message":"196","line":44,"column":37,"nodeType":"197","endLine":45,"endColumn":67},{"ruleId":"195","severity":1,"message":"196","line":7,"column":13,"nodeType":"197","endLine":7,"endColumn":35},{"ruleId":"180","replacedBy":"198"},{"ruleId":"182","replacedBy":"199"},{"ruleId":"184","severity":1,"message":"188","line":1,"column":8,"nodeType":"186","messageId":"187","endLine":1,"endColumn":13},{"ruleId":"184","severity":1,"message":"200","line":5,"column":9,"nodeType":"186","messageId":"187","endLine":5,"endColumn":22},{"ruleId":"195","severity":1,"message":"196","line":25,"column":17,"nodeType":"197","endLine":25,"endColumn":68},{"ruleId":"184","severity":1,"message":"201","line":3,"column":8,"nodeType":"186","messageId":"187","endLine":3,"endColumn":9},{"ruleId":"195","severity":1,"message":"196","line":7,"column":13,"nodeType":"197","endLine":7,"endColumn":35},{"ruleId":"184","severity":1,"message":"202","line":1,"column":10,"nodeType":"186","messageId":"187","endLine":1,"endColumn":24},{"ruleId":"184","severity":1,"message":"201","line":2,"column":8,"nodeType":"186","messageId":"187","endLine":2,"endColumn":9},"no-native-reassign",["203"],"no-negated-in-lhs",["204"],"@typescript-eslint/no-unused-vars","'withRouter' is defined but never used.","Identifier","unusedVar","'React' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'InitialAuthStateType' is defined but never used.","'WithAuthRedirect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["203"],["204"],"'ProfileStatus' is defined but never used.","'c' is defined but never used.","'createSelector' is defined but never used.","no-global-assign","no-unsafe-negation"]