[{"E:\\social network git\\-social-network\\social network\\src\\index.tsx":"1","E:\\social network git\\-social-network\\social network\\src\\reportWebVitals.ts":"2","E:\\social network git\\-social-network\\social network\\src\\App.tsx":"3","E:\\social network git\\-social-network\\social network\\src\\Redax\\redux-store.tsx":"4","E:\\social network git\\-social-network\\social network\\src\\component\\Login\\Login.tsx":"5","E:\\social network git\\-social-network\\social network\\src\\component\\Navbar\\Navbar.tsx":"6","E:\\social network git\\-social-network\\social network\\src\\Redax\\dialogsPage-reducer.ts":"7","E:\\social network git\\-social-network\\social network\\src\\Redax\\auth-reducer.ts":"8","E:\\social network git\\-social-network\\social network\\src\\Redax\\users-reducer.ts":"9","E:\\social network git\\-social-network\\social network\\src\\Redax\\profile-reducer.ts":"10","E:\\social network git\\-social-network\\social network\\src\\component\\Users\\UsersContainer.tsx":"11","E:\\social network git\\-social-network\\social network\\src\\component\\Header\\HeaderContanier.tsx":"12","E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\DialogsContainer.tsx":"13","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\ProfileContanier.tsx":"14","E:\\social network git\\-social-network\\social network\\src\\api\\api.js":"15","E:\\social network git\\-social-network\\social network\\src\\component\\Header\\Header.tsx":"16","E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\Dialogs.tsx":"17","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\Profile.tsx":"18","E:\\social network git\\-social-network\\social network\\src\\component\\Users\\Users.tsx":"19","E:\\social network git\\-social-network\\social network\\src\\component\\commen\\preloader\\Preloader.tsx":"20","E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\Message\\Message.tsx":"21","E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\DialogItem\\DialogsItem.tsx":"22","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\Myposts\\MyPostsContainer.tsx":"23","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\ProfileInfo\\ProfileInfo.tsx":"24","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\Myposts\\MyPosts.tsx":"25","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\Myposts\\Post\\Post.tsx":"26","E:\\social network git\\-social-network\\social network\\src\\HOC\\withAuthRedirect.tsx":"27","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\ProfileInfo\\ProfileStatus.tsx":"28"},{"size":731,"mtime":1628889227904,"results":"29","hashOfConfig":"30"},{"size":440,"mtime":1628889227906,"results":"31","hashOfConfig":"30"},{"size":1026,"mtime":1629784402602,"results":"32","hashOfConfig":"30"},{"size":1027,"mtime":1629812814449,"results":"33","hashOfConfig":"30"},{"size":150,"mtime":1629784402718,"results":"34","hashOfConfig":"30"},{"size":1105,"mtime":1628889227897,"results":"35","hashOfConfig":"30"},{"size":1490,"mtime":1629784564639,"results":"36","hashOfConfig":"30"},{"size":1447,"mtime":1629788095659,"results":"37","hashOfConfig":"30"},{"size":5544,"mtime":1629788095671,"results":"38","hashOfConfig":"30"},{"size":3108,"mtime":1629795228891,"results":"39","hashOfConfig":"30"},{"size":2439,"mtime":1629823969586,"results":"40","hashOfConfig":"30"},{"size":1008,"mtime":1629788095673,"results":"41","hashOfConfig":"30"},{"size":1238,"mtime":1629823689543,"results":"42","hashOfConfig":"30"},{"size":1617,"mtime":1629874347543,"results":"43","hashOfConfig":"30"},{"size":764,"mtime":1629788095672,"results":"44","hashOfConfig":"30"},{"size":759,"mtime":1628889227895,"results":"45","hashOfConfig":"30"},{"size":1816,"mtime":1629813105919,"results":"46","hashOfConfig":"30"},{"size":558,"mtime":1629795506016,"results":"47","hashOfConfig":"30"},{"size":2858,"mtime":1629788095675,"results":"48","hashOfConfig":"30"},{"size":244,"mtime":1628889227904,"results":"49","hashOfConfig":"30"},{"size":255,"mtime":1628889227895,"results":"50","hashOfConfig":"30"},{"size":434,"mtime":1628889227893,"results":"51","hashOfConfig":"30"},{"size":816,"mtime":1629788095674,"results":"52","hashOfConfig":"30"},{"size":890,"mtime":1629874986018,"results":"53","hashOfConfig":"30"},{"size":1563,"mtime":1628889227898,"results":"54","hashOfConfig":"30"},{"size":515,"mtime":1628889227899,"results":"55","hashOfConfig":"30"},{"size":795,"mtime":1629813907298,"results":"56","hashOfConfig":"30"},{"size":946,"mtime":1629876256439,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1tw51aq",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\social network git\\-social-network\\social network\\src\\index.tsx",[],["124","125"],"E:\\social network git\\-social-network\\social network\\src\\reportWebVitals.ts",[],"E:\\social network git\\-social-network\\social network\\src\\App.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\Redax\\redux-store.tsx",["126"],"import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer, {addPostAC, setUsersProfile, updateNewPostTextAC} from \"./profile-reducer\";\r\nimport dialogsPageReducer, {AddMessageAC, UpdateNewMessageTextAC} from \"./dialogsPage-reducer\";\r\nimport React from \"react\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsPageReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer,applyMiddleware(thunkMiddleware))\r\n\r\nexport type Types = ReturnType<typeof addPostAC> | ReturnType<typeof updateNewPostTextAC> |\r\n    ReturnType<typeof AddMessageAC> | ReturnType<typeof UpdateNewMessageTextAC> | ReturnType<typeof setUsersProfile>\r\n// @ts-ignore\r\nwindow.store=store;\r\nexport default store;\r\n\r\n\r\n\r\n","E:\\social network git\\-social-network\\social network\\src\\component\\Login\\Login.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Navbar\\Navbar.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\Redax\\dialogsPage-reducer.ts",[],"E:\\social network git\\-social-network\\social network\\src\\Redax\\auth-reducer.ts",[],"E:\\social network git\\-social-network\\social network\\src\\Redax\\users-reducer.ts",["127"],"import React from \"react\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/api\";\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_TOTAL_COUNT_PAGE = 'SET_TOTAL_COUNT_PAGE'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\nexport type UsersTypeAC =\r\n    ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n\r\ntype LocationType = {\r\n    city: string,\r\n    country: string,\r\n}\r\ntype PhotosType = {\r\n    small: string,\r\n    large: string,\r\n}\r\nexport type UserType = {\r\n    id: number,\r\n    photos: PhotosType,\r\n    name: string,\r\n    status: string,\r\n    followed: boolean,\r\n    location: LocationType,\r\n    uniqueUrlName: null,\r\n\r\n}\r\nexport type InitialStateType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<number>,\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [],\r\n}\r\n\r\nconst usersReducer: React.Reducer<InitialStateType, UsersTypeAC> = (state = initialState, action)\r\n    : InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {\r\n                            ...u,\r\n                            followed: true\r\n                        }\r\n                    } else {\r\n                        return u\r\n                    }\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {\r\n                            ...u,\r\n                            followed: false\r\n                        }\r\n                    } else {\r\n                        return u\r\n                    }\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state, currentPage: action.currentPage\r\n            }\r\n        case SET_TOTAL_COUNT_PAGE:\r\n            return {\r\n                ...state, totalUsersCount: action.totalCount\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId: number) => {\r\n    return {type: FOLLOW, userId} as const\r\n}\r\nexport const unfollowSuccess = (userId: number) => {\r\n    return {type: UNFOLLOW, userId} as const\r\n}\r\nexport const setUsers = (users: UserType[]) => {\r\n    return {type: SET_USERS, users} as const\r\n}\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {type: SET_CURRENT_PAGE, currentPage} as const\r\n}\r\nexport const setTotalUsersCount = (totalCount: number) => {\r\n    return {type: SET_TOTAL_COUNT_PAGE, totalCount} as const\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {type: TOGGLE_IS_FETCHING, isFetching} as const\r\n}\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => {\r\n    return {type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId} as const\r\n}\r\n\r\n\r\nexport const getUsersThunk = (currentPage: number, pageSize: number) => {\r\n\r\n    return (dispatch: Dispatch<UsersTypeAC>) => {\r\n        dispatch(toggleIsFetching(true))\r\n        usersAPI.getUsers(currentPage, pageSize)\r\n            .then(data => {\r\n                dispatch(toggleIsFetching(false))\r\n                dispatch(setUsers(data.items))\r\n                dispatch(setTotalUsersCount(data.totalCount))\r\n            })\r\n    }\r\n}\r\n\r\nexport const follow = (userId: number) => {\r\n    return (dispatch: Dispatch<UsersTypeAC>) => {\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        usersAPI.follow(userId)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(followSuccess(userId))\r\n                }\r\n                dispatch(toggleFollowingProgress(false, userId))\r\n            })\r\n    }\r\n}\r\nexport const unfollow = (userId: number) => {\r\n    return (dispatch: Dispatch<UsersTypeAC>) => {\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        usersAPI.unfollow(userId)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(unfollowSuccess(userId))\r\n                }\r\n                dispatch(toggleFollowingProgress(false, userId))\r\n            })\r\n    }\r\n}\r\nexport default usersReducer;","E:\\social network git\\-social-network\\social network\\src\\Redax\\profile-reducer.ts",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Users\\UsersContainer.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Header\\HeaderContanier.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\DialogsContainer.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\ProfileContanier.tsx",["128","129","130"],"E:\\social network git\\-social-network\\social network\\src\\api\\api.js",[],["131","132"],"E:\\social network git\\-social-network\\social network\\src\\component\\Header\\Header.tsx",["133"],"import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport c from './Header.module.css';\r\nimport {InitialAuthStateType} from \"../../Redax/auth-reducer\";\r\n\r\ntype HeaderPropsType={\r\n    auth:InitialAuthStateType\r\n}\r\nconst Header:React.FC<HeaderPropsType> = (props) => {\r\n    return (\r\n        <div className={c.header}>\r\n            <img\r\n                src={'https://st.depositphotos.com/2321413/3088/v/600/depositphotos_30889807-stock-illustration-simple-social-media-icon.jpg'}/>\r\n            <div className={c.loginBlock}>\r\n                {props.auth.isAuth\r\n                    ? props.auth.login\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Header;\r\n","E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\Dialogs.tsx",["134"],"import React, {ChangeEvent} from 'react';\r\nimport c from './Dialogs.module.css';\r\nimport {DialogItem} from \"./DialogItem/DialogsItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {dialogsPageType} from \"./DialogsContainer\";\r\nimport {InitialAuthStateType} from \"../../Redax/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n// import {dialogsPageType} from \"../../Redax/store\";\r\n\r\n\r\ntype PropsDialogType = {\r\n    dialogsPage: dialogsPageType,\r\n    InitialAuthState:InitialAuthStateType,\r\n    updateNewMessageBody: (body: string) => void,\r\n    sendMessage: () => void,\r\n}\r\n\r\n\r\nconst Dialogs: React.FC<PropsDialogType> = (props) => {\r\n    let state = props.dialogsPage\r\n    const DialogsElement = state.DialogData.map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>)\r\n    const MessageElement = state.MessageData.map(m => <Message key={m.id}  message={m.message}/>)\r\n    let newMassageBody = state.newMessage\r\n\r\n\r\n    const addMessage = () => {\r\n        props.sendMessage()\r\n    }\r\n\r\n    const ChangeMessage = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        const body = e.target.value\r\n        props.updateNewMessageBody(body)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={c.dialogs}>\r\n            <div className={c.dialogItem}>\r\n                {DialogsElement}\r\n            </div>\r\n            <div className={c.messages}>\r\n                {MessageElement}\r\n            </div>\r\n            <div>\r\n                <textarea\r\n                    value={newMassageBody}\r\n                    onChange={ChangeMessage}\r\n                    placeholder={'Enter your message'}>\r\n                </textarea>\r\n            </div>\r\n            <div>\r\n                <button onClick={addMessage}>send message</button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;\r\n","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\Profile.tsx",["135"],"import React from 'react';\r\nimport c from './Profile.module.css';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./Myposts/MyPostsContainer\";\r\nimport {profilePageType, ProfileType} from \"../../Redax/profile-reducer\";\r\n\r\ntype ProfileProps={\r\n    profilePage:profilePageType|null,\r\n}\r\nconst Profile = (props:ProfileProps) => {\r\n    return (\r\n        <div className={c.profile}>\r\n            <ProfileInfo profilePage={props.profilePage}/>\r\n            <MyPostsContainer/>\r\n        </div>);\r\n}\r\n\r\nexport default Profile;\r\n","E:\\social network git\\-social-network\\social network\\src\\component\\Users\\Users.tsx",["136"],"import React from 'react';\r\nimport s from './Users.module.css'\r\nimport userPhoto from \"../../assets/images/User-Profile.png\"\r\nimport {UserType} from \"../../Redax/users-reducer\";\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype UsersPropsType = {\r\n    onPageChanged: (currentPage: number) => void,\r\n    totalUsersCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    users: Array<UserType>,\r\n    follow: (userId: number) => void,\r\n    unfollow: (userId: number) => void,\r\n    followingInProgress: Array<number>,\r\n}\r\n\r\nconst Users = (props: UsersPropsType) => {\r\n\r\n    const pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    const pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                {pages.map(p => {\r\n                    return (\r\n                        <span className={props.currentPage === p ? s.selected : ''}\r\n                              onClick={(e) => {\r\n                                  props.onPageChanged(p)\r\n                              }}>\r\n                                {p}\r\n                            </span>\r\n                    )\r\n                })}\r\n            </div>\r\n            {\r\n                props.users.map(u => <div key={u.id}>\r\n                        <div>\r\n                            <div>\r\n                                <NavLink to={'/profile/' + u.id}>\r\n                                    <img src={u.photos.small != null ? u.photos.small : userPhoto}\r\n                                         className={s.userPhoto}/>\r\n                                </NavLink>\r\n                            </div>\r\n                            <div>{u.followed\r\n                                ? <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                          onClick={() => {\r\n                                              props.unfollow(u.id)\r\n                                          }}>\r\n                                    Unfollow</button>\r\n                                : <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                          onClick={() => props.follow(u.id)}>\r\n                                    Follow</button>\r\n                            }\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div>{u.name}</div>\r\n                            <div>{u.status}</div>\r\n                        </div>\r\n                        <div>\r\n                            <div>{\"u.location.country\"}</div>\r\n                            <div>{\"u.location.city\"}</div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Users;","E:\\social network git\\-social-network\\social network\\src\\component\\commen\\preloader\\Preloader.tsx",["137"],"import React from 'react';\r\nimport preloader from '../../../assets/images/Preloader.gif';\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div>\r\n            <img src={preloader}/>\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default Preloader;","E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\Message\\Message.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\DialogItem\\DialogsItem.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\Myposts\\MyPostsContainer.tsx",["138"],"import React from 'react';\r\nimport {addPostAC, updateNewPostTextAC} from \"../../../Redax/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport { RootStateType, Types} from \"../../../Redax/store\";\r\n\r\n\r\nconst mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        PostsData: state.profilePage.PostsData,\r\n        newPostText: state.profilePage.messageNewPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: (action: Types) => void) => {\r\n    return {\r\n        updateNewPostText: (newText: string) => {\r\n            dispatch(updateNewPostTextAC(newText))\r\n        },\r\n        addPost: (postMessage: string) => {\r\n            dispatch(addPostAC(postMessage))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n\r\n","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\ProfileInfo\\ProfileInfo.tsx",["139"],"E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\Myposts\\MyPosts.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\Myposts\\Post\\Post.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\HOC\\withAuthRedirect.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\ProfileInfo\\ProfileStatus.tsx",["140"],{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":4,"column":8,"nodeType":"147","messageId":"148","endLine":4,"endColumn":13},{"ruleId":"149","severity":1,"message":"150","line":112,"column":65,"nodeType":"151","messageId":"152","endLine":112,"endColumn":67},{"ruleId":"145","severity":1,"message":"153","line":6,"column":9,"nodeType":"147","messageId":"148","endLine":6,"endColumn":17},{"ruleId":"145","severity":1,"message":"154","line":8,"column":9,"nodeType":"147","messageId":"148","endLine":8,"endColumn":29},{"ruleId":"145","severity":1,"message":"155","line":9,"column":8,"nodeType":"147","messageId":"148","endLine":9,"endColumn":24},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"156","severity":1,"message":"157","line":12,"column":13,"nodeType":"158","endLine":13,"endColumn":145},{"ruleId":"145","severity":1,"message":"153","line":7,"column":9,"nodeType":"147","messageId":"148","endLine":7,"endColumn":17},{"ruleId":"145","severity":1,"message":"159","line":5,"column":26,"nodeType":"147","messageId":"148","endLine":5,"endColumn":37},{"ruleId":"156","severity":1,"message":"157","line":44,"column":37,"nodeType":"158","endLine":45,"endColumn":67},{"ruleId":"156","severity":1,"message":"157","line":7,"column":13,"nodeType":"158","endLine":7,"endColumn":35},{"ruleId":"145","severity":1,"message":"146","line":1,"column":8,"nodeType":"147","messageId":"148","endLine":1,"endColumn":13},{"ruleId":"156","severity":1,"message":"157","line":22,"column":17,"nodeType":"158","endLine":22,"endColumn":68},{"ruleId":"145","severity":1,"message":"160","line":2,"column":8,"nodeType":"147","messageId":"148","endLine":2,"endColumn":9},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],"@typescript-eslint/no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Redirect' is defined but never used.","'InitialAuthStateType' is defined but never used.","'WithAuthRedirect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'ProfileType' is defined but never used.","'c' is defined but never used.","no-global-assign","no-unsafe-negation"]