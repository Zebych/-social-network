[{"E:\\social network git\\-social-network\\social network\\src\\index.tsx":"1","E:\\social network git\\-social-network\\social network\\src\\reportWebVitals.ts":"2","E:\\social network git\\-social-network\\social network\\src\\App.tsx":"3","E:\\social network git\\-social-network\\social network\\src\\Redax\\redux-store.tsx":"4","E:\\social network git\\-social-network\\social network\\src\\component\\Login\\Login.tsx":"5","E:\\social network git\\-social-network\\social network\\src\\component\\Navbar\\Navbar.tsx":"6","E:\\social network git\\-social-network\\social network\\src\\Redax\\dialogsPage-reducer.ts":"7","E:\\social network git\\-social-network\\social network\\src\\Redax\\auth-reducer.ts":"8","E:\\social network git\\-social-network\\social network\\src\\Redax\\users-reducer.ts":"9","E:\\social network git\\-social-network\\social network\\src\\Redax\\profile-reducer.ts":"10","E:\\social network git\\-social-network\\social network\\src\\component\\Users\\UsersContainer.tsx":"11","E:\\social network git\\-social-network\\social network\\src\\component\\Header\\HeaderContanier.tsx":"12","E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\DialogsContainer.tsx":"13","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\ProfileContanier.tsx":"14","E:\\social network git\\-social-network\\social network\\src\\api\\api.js":"15","E:\\social network git\\-social-network\\social network\\src\\component\\Header\\Header.tsx":"16","E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\Dialogs.tsx":"17","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\Profile.tsx":"18","E:\\social network git\\-social-network\\social network\\src\\component\\Users\\Users.tsx":"19","E:\\social network git\\-social-network\\social network\\src\\component\\commen\\preloader\\Preloader.tsx":"20","E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\Message\\Message.tsx":"21","E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\DialogItem\\DialogsItem.tsx":"22","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\Myposts\\MyPostsContainer.tsx":"23","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\ProfileInfo\\ProfileInfo.tsx":"24","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\Myposts\\MyPosts.tsx":"25","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\Myposts\\Post\\Post.tsx":"26","E:\\social network git\\-social-network\\social network\\src\\HOC\\withAuthRedirect.tsx":"27","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\ProfileInfo\\ProfileStatus.tsx":"28","E:\\social network git\\-social-network\\social network\\src\\utils\\validators\\validators.ts":"29","E:\\social network git\\-social-network\\social network\\src\\component\\commen\\Preloader\\Preloader.tsx":"30","E:\\social network git\\-social-network\\social network\\src\\component\\commen\\FormControls\\FormControls.tsx":"31","E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\AddMessageForm\\AddMessageForm.tsx":"32"},{"size":731,"mtime":1628889227904,"results":"33","hashOfConfig":"34"},{"size":440,"mtime":1628889227906,"results":"35","hashOfConfig":"34"},{"size":1026,"mtime":1629784402602,"results":"36","hashOfConfig":"34"},{"size":1031,"mtime":1630517306218,"results":"37","hashOfConfig":"34"},{"size":1990,"mtime":1631717829309,"results":"38","hashOfConfig":"34"},{"size":1105,"mtime":1628889227897,"results":"39","hashOfConfig":"34"},{"size":1173,"mtime":1630513239558,"results":"40","hashOfConfig":"34"},{"size":2269,"mtime":1631719569314,"results":"41","hashOfConfig":"34"},{"size":5544,"mtime":1629788095671,"results":"42","hashOfConfig":"34"},{"size":3677,"mtime":1630517952290,"results":"43","hashOfConfig":"34"},{"size":2439,"mtime":1630917053781,"results":"44","hashOfConfig":"34"},{"size":1062,"mtime":1631631555745,"results":"45","hashOfConfig":"34"},{"size":1102,"mtime":1630513239601,"results":"46","hashOfConfig":"34"},{"size":1595,"mtime":1631720951489,"results":"47","hashOfConfig":"34"},{"size":1186,"mtime":1630942334124,"results":"48","hashOfConfig":"34"},{"size":842,"mtime":1630947526258,"results":"49","hashOfConfig":"34"},{"size":1414,"mtime":1630921465379,"results":"50","hashOfConfig":"34"},{"size":694,"mtime":1630517253156,"results":"51","hashOfConfig":"34"},{"size":2858,"mtime":1629788095675,"results":"52","hashOfConfig":"34"},{"size":244,"mtime":1628889227904,"results":"53","hashOfConfig":"34"},{"size":255,"mtime":1628889227895,"results":"54","hashOfConfig":"34"},{"size":434,"mtime":1628889227893,"results":"55","hashOfConfig":"34"},{"size":724,"mtime":1630517176407,"results":"56","hashOfConfig":"34"},{"size":1029,"mtime":1630917053757,"results":"57","hashOfConfig":"34"},{"size":1858,"mtime":1630917784469,"results":"58","hashOfConfig":"34"},{"size":515,"mtime":1628889227899,"results":"59","hashOfConfig":"34"},{"size":795,"mtime":1629813907298,"results":"60","hashOfConfig":"34"},{"size":1625,"mtime":1629911255776,"results":"61","hashOfConfig":"34"},{"size":307,"mtime":1630916831792,"results":"62","hashOfConfig":"34"},{"size":244,"mtime":1628889227904,"results":"63","hashOfConfig":"34"},{"size":1404,"mtime":1630922728007,"results":"64","hashOfConfig":"34"},{"size":884,"mtime":1630921465368,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"1tw51aq",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"68"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"68"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"68"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"68"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"68"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"68"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"68"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"68"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"E:\\social network git\\-social-network\\social network\\src\\index.tsx",[],["141","142"],"E:\\social network git\\-social-network\\social network\\src\\reportWebVitals.ts",[],"E:\\social network git\\-social-network\\social network\\src\\App.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\Redax\\redux-store.tsx",["143"],"import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer, {addPostAC, setStatus, setUsersProfile} from \"./profile-reducer\";\r\nimport dialogsPageReducer, {AddMessageAC} from \"./dialogsPage-reducer\";\r\nimport React from \"react\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {reducer as formReducer} from \"redux-form\"\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsPageReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form:formReducer,\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport type Types =\r\n    ReturnType<typeof addPostAC>\r\n    | ReturnType<typeof AddMessageAC>\r\n    | ReturnType<typeof setUsersProfile>\r\n    | ReturnType<typeof setStatus>\r\n// @ts-ignore\r\nwindow.store = store;\r\nexport default store;\r\n\r\n\r\n\r\n","E:\\social network git\\-social-network\\social network\\src\\component\\Login\\Login.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Navbar\\Navbar.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\Redax\\dialogsPage-reducer.ts",[],"E:\\social network git\\-social-network\\social network\\src\\Redax\\auth-reducer.ts",[],"E:\\social network git\\-social-network\\social network\\src\\Redax\\users-reducer.ts",["144"],"import React from \"react\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/api\";\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_TOTAL_COUNT_PAGE = 'SET_TOTAL_COUNT_PAGE'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\nexport type UsersTypeAC =\r\n    ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n\r\ntype LocationType = {\r\n    city: string,\r\n    country: string,\r\n}\r\ntype PhotosType = {\r\n    small: string,\r\n    large: string,\r\n}\r\nexport type UserType = {\r\n    id: number,\r\n    photos: PhotosType,\r\n    name: string,\r\n    status: string,\r\n    followed: boolean,\r\n    location: LocationType,\r\n    uniqueUrlName: null,\r\n\r\n}\r\nexport type InitialStateType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<number>,\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [],\r\n}\r\n\r\nconst usersReducer: React.Reducer<InitialStateType, UsersTypeAC> = (state = initialState, action)\r\n    : InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {\r\n                            ...u,\r\n                            followed: true\r\n                        }\r\n                    } else {\r\n                        return u\r\n                    }\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {\r\n                            ...u,\r\n                            followed: false\r\n                        }\r\n                    } else {\r\n                        return u\r\n                    }\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state, currentPage: action.currentPage\r\n            }\r\n        case SET_TOTAL_COUNT_PAGE:\r\n            return {\r\n                ...state, totalUsersCount: action.totalCount\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId: number) => {\r\n    return {type: FOLLOW, userId} as const\r\n}\r\nexport const unfollowSuccess = (userId: number) => {\r\n    return {type: UNFOLLOW, userId} as const\r\n}\r\nexport const setUsers = (users: UserType[]) => {\r\n    return {type: SET_USERS, users} as const\r\n}\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {type: SET_CURRENT_PAGE, currentPage} as const\r\n}\r\nexport const setTotalUsersCount = (totalCount: number) => {\r\n    return {type: SET_TOTAL_COUNT_PAGE, totalCount} as const\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {type: TOGGLE_IS_FETCHING, isFetching} as const\r\n}\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => {\r\n    return {type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId} as const\r\n}\r\n\r\n\r\nexport const getUsersThunk = (currentPage: number, pageSize: number) => {\r\n\r\n    return (dispatch: Dispatch<UsersTypeAC>) => {\r\n        dispatch(toggleIsFetching(true))\r\n        usersAPI.getUsers(currentPage, pageSize)\r\n            .then(data => {\r\n                dispatch(toggleIsFetching(false))\r\n                dispatch(setUsers(data.items))\r\n                dispatch(setTotalUsersCount(data.totalCount))\r\n            })\r\n    }\r\n}\r\n\r\nexport const follow = (userId: number) => {\r\n    return (dispatch: Dispatch<UsersTypeAC>) => {\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        usersAPI.follow(userId)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(followSuccess(userId))\r\n                }\r\n                dispatch(toggleFollowingProgress(false, userId))\r\n            })\r\n    }\r\n}\r\nexport const unfollow = (userId: number) => {\r\n    return (dispatch: Dispatch<UsersTypeAC>) => {\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        usersAPI.unfollow(userId)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(unfollowSuccess(userId))\r\n                }\r\n                dispatch(toggleFollowingProgress(false, userId))\r\n            })\r\n    }\r\n}\r\nexport default usersReducer;","E:\\social network git\\-social-network\\social network\\src\\Redax\\profile-reducer.ts",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Users\\UsersContainer.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Header\\HeaderContanier.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\DialogsContainer.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\ProfileContanier.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\api\\api.js",[],["145","146"],"E:\\social network git\\-social-network\\social network\\src\\component\\Header\\Header.tsx",["147"],"import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport c from './Header.module.css';\r\nimport {InitialAuthStateType} from \"../../Redax/auth-reducer\";\r\n\r\ntype HeaderPropsType={\r\n    auth:InitialAuthStateType\r\n    logout:()=>void\r\n}\r\nconst Header:React.FC<HeaderPropsType> = (props) => {\r\n    return (\r\n        <div className={c.header}>\r\n            <img\r\n                src={'https://st.depositphotos.com/2321413/3088/v/600/depositphotos_30889807-stock-illustration-simple-social-media-icon.jpg'}/>\r\n            <div className={c.loginBlock}>\r\n                {props.auth.isAuth\r\n                    ? <div>{props.auth.login}- <button onClick={props.logout}>Log out</button></div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Header;\r\n","E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\Dialogs.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\Profile.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Users\\Users.tsx",["148"],"import React from 'react';\r\nimport s from './Users.module.css'\r\nimport userPhoto from \"../../assets/images/User-Profile.png\"\r\nimport {UserType} from \"../../Redax/users-reducer\";\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype UsersPropsType = {\r\n    onPageChanged: (currentPage: number) => void,\r\n    totalUsersCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    users: Array<UserType>,\r\n    follow: (userId: number) => void,\r\n    unfollow: (userId: number) => void,\r\n    followingInProgress: Array<number>,\r\n}\r\n\r\nconst Users = (props: UsersPropsType) => {\r\n\r\n    const pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    const pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                {pages.map(p => {\r\n                    return (\r\n                        <span className={props.currentPage === p ? s.selected : ''}\r\n                              onClick={(e) => {\r\n                                  props.onPageChanged(p)\r\n                              }}>\r\n                                {p}\r\n                            </span>\r\n                    )\r\n                })}\r\n            </div>\r\n            {\r\n                props.users.map(u => <div key={u.id}>\r\n                        <div>\r\n                            <div>\r\n                                <NavLink to={'/profile/' + u.id}>\r\n                                    <img src={u.photos.small != null ? u.photos.small : userPhoto}\r\n                                         className={s.userPhoto}/>\r\n                                </NavLink>\r\n                            </div>\r\n                            <div>{u.followed\r\n                                ? <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                          onClick={() => {\r\n                                              props.unfollow(u.id)\r\n                                          }}>\r\n                                    Unfollow</button>\r\n                                : <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                          onClick={() => props.follow(u.id)}>\r\n                                    Follow</button>\r\n                            }\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div>{u.name}</div>\r\n                            <div>{u.status}</div>\r\n                        </div>\r\n                        <div>\r\n                            <div>{\"u.location.country\"}</div>\r\n                            <div>{\"u.location.city\"}</div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Users;","E:\\social network git\\-social-network\\social network\\src\\component\\commen\\preloader\\Preloader.tsx",["149"],"import React from 'react';\r\nimport preloader from '../../../assets/images/Preloader.gif';\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div>\r\n            <img src={preloader}/>\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default Preloader;",["150","151"],"E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\Message\\Message.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\DialogItem\\DialogsItem.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\Myposts\\MyPostsContainer.tsx",["152"],"import React from 'react';\r\nimport {addPostAC} from \"../../../Redax/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Types} from \"../../../Redax/redux-store\";\r\nimport { RootStateType} from \"../../../Redax/store\";\r\n\r\n\r\nconst mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        PostsData: state.profilePage.PostsData,\r\n        newPostText: state.profilePage.messageNewPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: (action: Types) => void) => {\r\n    return {\r\n        addPost: (postMessage: string) => {\r\n            dispatch(addPostAC(postMessage))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n\r\n","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\ProfileInfo\\ProfileInfo.tsx",["153"],"import React from \"react\";\r\nimport c from './ProfileInfo.module.css'\r\nimport Preloader from \"../../commen/Preloader/Preloader\";\r\nimport {profilePageType} from \"../../../Redax/profile-reducer\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n\r\n    profilePage: profilePageType|null,\r\n    getStatus: (userId: string) => void,\r\n    updateStatus: (status: string) => void,\r\n}\r\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    if (!props.profilePage) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={c.profileInfo}>\r\n            <div>\r\n                {/*   <img\r\n                    src={'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQHgJ5gGZuqtluFKjVRaCEEmoWihm4LmHuwrw&usqp=CAU'}/>*/}\r\n            </div>\r\n            <div>\r\n                <img src={props.profilePage.profile.photos.large}/>\r\n                <ProfileStatus status={props.profilePage.status}updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}","E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\Myposts\\MyPosts.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\Myposts\\Post\\Post.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\HOC\\withAuthRedirect.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Profile\\ProfileInfo\\ProfileStatus.tsx",["154"],"import React, {ChangeEvent} from \"react\";\r\n\r\nimport c from './ProfileInfo.module.css'\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}\r\ntype LocalStateType = {\r\n    editMode: boolean,\r\n    status: string,\r\n}\r\n\r\nexport class ProfileStatus extends React.Component<ProfileStatusPropsType> {\r\n    state: LocalStateType = {\r\n        editMode: false,\r\n        status: this.props.status,\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true,\r\n        })\r\n    }\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false,\r\n        })\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ProfileStatusPropsType, prevState: LocalStateType) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({status: this.state.status})\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    {!this.state.editMode &&\r\n                    <span onDoubleClick={this.activateEditMode}>{this.props.status || '----'}</span>}\r\n                </div>\r\n                <div>\r\n                    {this.state.editMode &&\r\n                    <input onChange={this.onStatusChange} autoFocus onBlur={this.deactivateEditMode}\r\n                           value={this.state.status}/>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","E:\\social network git\\-social-network\\social network\\src\\utils\\validators\\validators.ts",[],"E:\\social network git\\-social-network\\social network\\src\\component\\commen\\Preloader\\Preloader.tsx",["155"],"E:\\social network git\\-social-network\\social network\\src\\component\\commen\\FormControls\\FormControls.tsx",[],"E:\\social network git\\-social-network\\social network\\src\\component\\Dialogs\\AddMessageForm\\AddMessageForm.tsx",[],{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":4,"column":8,"nodeType":"162","messageId":"163","endLine":4,"endColumn":13},{"ruleId":"164","severity":1,"message":"165","line":112,"column":65,"nodeType":"166","messageId":"167","endLine":112,"endColumn":67},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"168","severity":1,"message":"169","line":13,"column":13,"nodeType":"170","endLine":14,"endColumn":145},{"ruleId":"168","severity":1,"message":"169","line":44,"column":37,"nodeType":"170","endLine":45,"endColumn":67},{"ruleId":"168","severity":1,"message":"169","line":7,"column":13,"nodeType":"170","endLine":7,"endColumn":35},{"ruleId":"156","replacedBy":"171"},{"ruleId":"158","replacedBy":"172"},{"ruleId":"160","severity":1,"message":"161","line":1,"column":8,"nodeType":"162","messageId":"163","endLine":1,"endColumn":13},{"ruleId":"168","severity":1,"message":"169","line":25,"column":17,"nodeType":"170","endLine":25,"endColumn":68},{"ruleId":"160","severity":1,"message":"173","line":3,"column":8,"nodeType":"162","messageId":"163","endLine":3,"endColumn":9},{"ruleId":"168","severity":1,"message":"169","line":7,"column":13,"nodeType":"170","endLine":7,"endColumn":35},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],"@typescript-eslint/no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["174"],["175"],"'c' is defined but never used.","no-global-assign","no-unsafe-negation"]