{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/Contact/Contact.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Forms/AddPostOrMessageForm.tsx","components/Forms/AddPostForm.module.css","images/user.png","components/Profile/ProfileInfo/ProfileInfo.module.css"],"names":["module","exports","ProfileStatus","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","isOwner","onBlur","updateStatus","deactivateEditMode","onChange","e","currentTarget","value","autoFocus","Contact","contact","contactValue","style","paddingLeft","ProfileDataForm","profile","contacts","fullName","useSelector","state","profilePage","aboutME","aboutMe","lookingForaJob","lookingForAJob","lookingForaJobDescription","lookingForAJobDescription","userContacts","profileError","editProfileError","dispatch","useDispatch","useForm","mode","reValidateMode","defaultValues","register","handleSubmit","className","s","profileInfoWrapper","onSubmit","data","updateProfileThunk","profileDataFormInputs","type","width","height","resize","outline","border","Object","entries","map","index","key","errorMessage","SuperButton","ProfileData","ProfileInfo","updatePhoto","profileInfoEditMode","keys","length","container","profileWrapper","profileAvatarWrapper","alt","image","src","photos","large","userPhoto","padding","display","flexDirection","marginLeft","target","files","name","id","htmlFor","editProfile","onClick","editModeProfileInfo","text","Preloader","Post","likeCounts","count","setCount","dateObj","Date","toLocaleString","item","avatar","info","marginBottom","message","MyPosts","postsElements","postData","post","postsWrapper","classNameTextArea","textarea","callBack","addPost","posts","MyPostsContainer","connect","Profile","updateUserStatusThunk","updatePhotoThunk","ProfileContainer","userId","this","match","params","autorizedUserId","toString","getUserProfileThunk","getUsersStatusThunk","history","push","refreshProfile","prevProps","prevState","snapshot","React","Component","compose","AuthRedirect","auth","withRouter","AddPostForm","classNameButton","setValue","errors","formState","required","minLength","maxLength","placeholder"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,UAAY,2BAA2B,MAAQ,uBAAuB,aAAe,8BAA8B,SAAW,4B,oBCAhJD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,OAAS,qBAAqB,KAAO,mBAAmB,KAAO,qB,0LCQ9FC,EAAgB,SAACC,GAAsB,IAAD,EAGfC,oBAAkB,GAHH,mBAGxCC,EAHwC,KAG9BC,EAH8B,OAInBF,mBAAiBD,EAAMI,QAJJ,mBAIxCA,EAJwC,KAIhCC,EAJgC,KAK/CC,qBAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAcV,OAEI,sCAGSF,GACD,8BACI,uBAAMK,cAnBG,WAChBP,EAAMQ,SAGXL,GAAY,IAeA,UACI,uCADJ,KACoBH,EAAMI,YAM9BF,GACA,8BACI,uBAAQO,OAAQ,kBAtBL,SAACL,GACxBJ,EAAMU,aAAaN,GACnBD,GAAY,GAoBsBQ,CAAmBP,IAClCQ,SAAU,SAACC,GAAD,OAAOR,EAAUQ,EAAEC,cAAcC,QAAQC,WAAS,EAACD,MAAOX,UC3ClFa,EAAU,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,aAC9B,OAAO,sBAAKC,MAAO,CAACC,YAAa,QAA1B,UACH,4BAAIH,IADD,KACgBC,M,gBC4BdG,EAAkB,SAAC,GAAoE,IAAnEZ,EAAkE,EAAlEA,aAAcN,EAAoD,EAApDA,OAAQmB,EAA4C,EAA5CA,QAASf,EAAmC,EAAnCA,QACxDgB,EAAWD,EAAQC,SAEjBC,EAAWC,aAAkC,SAACC,GAAD,OAAWA,EAAMC,YAAYL,QAAQE,YAClFI,EAAUH,aAAkC,SAACC,GAAD,OAAWA,EAAMC,YAAYL,QAAQO,WACjFC,EAAiBL,aAAmC,SAACC,GAAD,OAAWA,EAAMC,YAAYL,QAAQS,kBACzFC,EAA4BP,aAAkC,SAACC,GAAD,OAAWA,EAAMC,YAAYL,QAAQW,6BACnGC,EAAeT,aAAY,SAACC,GAAD,OAAyBA,EAAMC,YAAYL,QAAQC,YAC9EY,EAAeV,aAAY,SAACC,GAAD,OAAyBA,EAAMC,YAAYS,oBAEtEC,EAAWC,cAV8E,EAW9DC,YAAoB,CACjDC,KAAM,WACNC,eAAgB,WAChBC,cAAe,CACXlB,SAAUA,EACVK,QAASD,EACTG,eAAgBD,EAChBG,0BAA2BD,EAC3BT,SAAUW,KARXS,EAXwF,EAWxFA,SAAUC,EAX8E,EAW9EA,aAgBjB,OAEI,uBAAMC,UAAWC,IAAEC,mBAAoBC,SAAUJ,GANpC,SAACK,GACdZ,EAASa,YAAmBD,OAMtBtC,SAAU,kBAAM0B,EAASD,YAAiB,MADhD,UAEI,gCACI,yCADJ,KACqB,mCAAOS,UAAWC,IAAEK,uBAA2BR,EAAS,iBAE7E,cAAC,EAAD,CAAepC,QAASA,EAASJ,OAAQA,EAAQM,aAAcA,IAC/D,gCACI,yCADJ,KACqB,mCAAOoC,UAAWC,IAAEK,uBAA2BR,EAAS,gBAG7E,gCACI,kDADJ,KAC8B,mCAAOS,KAAM,YAAgBT,EAAS,uBAGpE,gCACI,uDADJ,IAEI,8BACI,sCAAUxB,MAAO,CACbkC,MAAO,QACPC,OAAQ,QACRC,OAAQ,OACRC,QAAS,OACTC,OAAQ,SACLd,EAAS,oCAKxB,gCACI,yCADJ,IACqBe,OAAOC,QAAQpC,GAAUqC,KAAI,WAAeC,GAAf,uBAAEC,EAAF,iBAC9C,gCAAMA,EAAN,IACI,+CACOjB,UAAWC,IAAEK,uBAA2BR,EAAS,YAAcmB,IADtE,IAEOV,KAAK,SAFAS,SAKf1B,GACG,qBAAKU,UAAWC,IAAEiB,aAAlB,SACK5B,OAIb,cAAC6B,EAAA,EAAD,CAAaZ,KAAM,SAAnB,sBC7BZ,IAAMa,EAAc,SAAC,GAAgE,IAA/DxD,EAA8D,EAA9DA,aAAcN,EAAgD,EAAhDA,OAAQmB,EAAwC,EAAxCA,QAASf,EAA+B,EAA/BA,QAC7CgB,EAAWD,EAAQC,SACvB,OAAO,sBAAKsB,UAAWC,IAAEC,mBAAlB,UAEH,gCACI,yCADJ,KACsBzB,EAAQE,YAE9B,cAAC,EAAD,CAAejB,QAASA,EAASJ,OAAQA,EAAQM,aAAcA,IAC/D,gCACI,yCADJ,KACsBa,EAAQO,WAG9B,gCACI,kDADJ,KAC+BP,EAAQS,eAAiB,MAAQ,QAG/DT,EAAQS,gBACT,gCACI,uDADJ,KACoCT,EAAQW,6BAI5C,qCACI,yCADJ,IACqByB,OAAOC,QAAQpC,GAAUqC,KAC1C,WAAeC,GAAf,uBAAEC,EAAF,KAAOhD,EAAP,YACI,cAAC,EAAD,CAEIG,QAAS6C,EACT5C,aAAcJ,GAFT+C,aASVK,EAnFf,YAA8F,IAAxE5C,EAAuE,EAAvEA,QAASnB,EAA8D,EAA9DA,OAAQM,EAAsD,EAAtDA,aAAcF,EAAwC,EAAxCA,QAAS4D,EAA+B,EAA/BA,YACpD9B,EAAWC,cACXrC,EAAWwB,aAAY,SAACC,GAAD,OAAyBA,EAAMC,YAAYyC,uBAExE,OAAKV,OAAOW,KAAK/C,GAASgD,OAanB,qBAAKzB,UAAWC,IAAEyB,UAAlB,SAEH,sBAAK1B,UAAWC,IAAE0B,eAAlB,UACI,sBAAK3B,UAAWC,IAAE2B,qBAAlB,UACI,qBAAKC,IAAK,eAAgB7B,UAAWC,IAAE6B,MAAOC,IAAKtD,EAAQuD,OAAOC,OAASC,MAEvExE,GACG,sBAAKY,MAAO,CAAC6D,QAAS,OAAQC,QAAS,OAAQC,cAAe,SAAUC,WAAY,QAApF,UACC,uBAAOxE,SAdF,SAACC,GAClBA,EAAEwE,OAAOC,OACTlB,EAAYvD,EAAEwE,OAAOC,MAAM,GAAGC,OAYiBC,GAAI,MAAOpE,MAAO,CAACgE,WAAY,OAAQF,QAAS,QAC5E7B,KAAK,SACZ,uBAAOoC,QAAQ,MAAf,0BACA,wBAAQ3C,UAAWC,IAAE2C,YAAaC,QAAS,kBAzBhCrD,EAASsD,aAAoB,KAyBxC,iCAKZ,qBAAK9C,UAAWC,IAAE8C,KAAlB,SACK3F,EACG,cAAC,EAAD,CAAiBQ,aAAcA,EAAca,QAASA,EAASnB,OAAQA,EAAQI,QAASA,IAExF,cAAC,EAAD,CAAaE,aAAcA,EAAcN,OAAQA,EAAQmB,QAASA,EAASf,QAASA,WAhCzF,8BACH,cAACsF,EAAA,EAAD,O,4CCSGC,MA7Bf,SAAc/F,GAAuB,IAAD,EAERC,mBAASD,EAAMgG,YAFP,mBAE3BC,EAF2B,KAEpBC,EAFoB,KAG5BC,EAAU,IAAIC,KAAK,8BAA8BC,iBAGrD,OAEI,sBAAKvD,UAAWC,IAAEuD,KAAlB,UACG,sBAAMlF,MAAO,CAAC8D,QAAQ,QAAtB,UACI,qBAAKP,IAAK,YAAaE,IAAK7E,EAAMuG,SAClC,sBAAMzD,UAAWC,IAAEyD,KAAnB,UACI,qBAAKpF,MAAO,CAACqF,aAAa,OAA1B,SACI,4CAEJ,8BAAMN,UAGb,qBAAKrD,UAAWC,IAAE8C,KAAlB,SAA0B7F,EAAM0G,UAEhC,8BACI,eAACzC,EAAA,EAAD,CAAc0B,QAAS,kBAAMO,EAASD,EAAQ,IAA9C,cAAoDA,EAApD,kBCNDU,MAtBf,SAAiB3G,GAEb,IAEI4G,EAFQ5G,EAAM4B,YAEQiF,SAAShD,KAAI,SAAAiD,GAAI,OAAI,cAAC,EAAD,CAAoBJ,QAASI,EAAKA,KAC5Bd,WAAYc,EAAKd,WAAYO,OAAQO,EAAKP,QADrCO,EAAKtB,OAI/D,OACI,sBAAK1C,UAAWC,IAAEyB,UAAlB,UAEI,sBAAK1B,UAAWC,IAAEgE,aAAlB,UACI,4CACA,cAAC,IAAD,CAAaC,kBAAmBjE,IAAEkE,SAAUC,SAAUlH,EAAMmH,aAEhE,qBAAKrE,UAAWC,IAAEqE,MAAlB,SACKR,QCIJS,EAAmBC,aAPR,SAAC3F,GACrB,MAAO,CACHC,YAAaD,EAAMC,eAK8B,CAAEuF,aAA3BG,CAAsCX,GCHvDY,MAXf,YAAwG,IAAtFhG,EAAqF,EAArFA,QAASnB,EAA4E,EAA5EA,OAAQoH,EAAoE,EAApEA,sBAAuBhH,EAA6C,EAA7CA,QAAQiH,EAAqC,EAArCA,iBAE9D,OAAO,sBAAK3E,UAAS,YAAd,UACH,cAAC,EAAD,CAAasB,YAAaqD,EAAmBjH,QAASA,EAASe,QAASA,EAASnB,OAAQA,EAAQM,aAAc8G,IAC/G,cAACH,EAAD,QCqBFK,E,+JAEF,c,4BAIA,WACI,IAE0C,IAFtCC,EAASC,KAAK5H,MAAM6H,MAAMC,OAAOH,OAEjCA,GAAUC,KAAK5H,MAAM+H,iBAErBJ,EAAM,UAAGA,SAAH,kBAAaC,KAAK5H,MAAM+H,uBAAxB,aAAa,EAA4BC,WAE/CJ,KAAK5H,MAAMiI,oBAAoBN,GAC/BC,KAAK5H,MAAMkI,oBAAoBP,IAG/BC,KAAK5H,MAAMmI,QAAQC,KAAK,Y,+BAIhC,WACIR,KAAKS,mB,gCAGT,SAAmBC,EAAgCC,EAAyBC,GACpEZ,KAAK5H,MAAM6H,MAAMC,OAAOH,SAAWW,EAAUT,MAAMC,OAAOH,QAC9DC,KAAKS,mB,oBAGT,WAEI,OACI,cAAC,EAAD,aAAS7H,SAAUoH,KAAK5H,MAAM6H,MAAMC,OAAOH,QAAYC,KAAK5H,Y,GAjCzCyI,IAAMC,WA6CtBC,sBAA6BC,IACxCtB,aARkB,SAAC3F,GAAD,MAA+C,CACjEJ,QAASI,EAAMC,YAAYL,QAC3BnB,OAAQuB,EAAMC,YAAYxB,OAC1B2H,gBAAiBpG,EAAMkH,KAAK3F,KAAKsC,MAKR,CAACyC,wBAAqBC,wBAAqBV,0BAAuBC,uBAC3FqB,IAFWH,CAGbjB,I,4HCrEWqB,EAAc,SAAC,GAA4D,IAAD,EAA1D7B,EAA0D,EAA1DA,SAASF,EAAiD,EAAjDA,kBAAkBgC,EAA+B,EAA/BA,gBAA+B,EAEfxG,YAAkB,CAAEC,KAAM,aAAtFG,EAF2E,EAE3EA,SAAUC,EAFiE,EAEjEA,aAAcoG,EAFmD,EAEnDA,SAAuBC,EAF4B,EAEzCC,UAAaD,OAQvD,OACI,uBAAMpG,UAAWC,IAAEyB,UAAWvB,SAAUJ,GARF,SAACK,GACvCgE,EAAShE,EAAKwD,SACduC,EAAS,UAAW,OAMpB,UAEI,kDAAWnG,UAAWkE,GAAuBpE,EAAS,UAAW,CAC7DwG,UAAU,EAAMC,UAAW,EAAGC,UAAW,CAAEvI,MAAO,IAAK2F,QAAS,qBADpE,IAGI6C,YAAa,0HACjB,yCACKL,EAAOxC,eADZ,aACK,EAAgBA,UAGrB,8BACI,cAAC,IAAD,CAAa5D,UAAWkG,EAAxB,yB,mBCtChBnJ,EAAOC,QAAU,CAAC,UAAY,iC,gCCDf,QAA0B,kC,mBCCzCD,EAAOC,QAAU,CAAC,UAAY,+BAA+B,mBAAqB,wCAAwC,eAAiB,oCAAoC,qBAAuB,0CAA0C,MAAQ,2BAA2B,KAAO,0BAA0B,YAAc,iCAAiC,sBAAwB,2CAA2C,aAAe","file":"static/js/3.4564ccd9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MyPosts_container__3h8Yc\",\"posts\":\"MyPosts_posts__3J4Z1\",\"postsWrapper\":\"MyPosts_postsWrapper__1r6fj\",\"textarea\":\"MyPosts_textarea__3Y74f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__yfzoY\",\"button\":\"Post_button__kIGWt\",\"info\":\"Post_info__1JoXL\",\"text\":\"Post_text__30jPZ\"};","import React, {useEffect, useState} from 'react'\r\n\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n}\r\n\r\nexport const ProfileStatus = (props: PropsType) => {\r\n\r\n\r\n    const [editMode, setEditMode] = useState<Boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]) // сетаем значение в локал стейт\r\n\r\n    const activateEditmode = () => {\r\n        if (!props.isOwner) {\r\n            return\r\n        }\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = (status: string) => {\r\n        props.updateStatus(status)\r\n        setEditMode(false)\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n\r\n            {\r\n                !editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditmode}>\r\n                        <b>Status</b>: {props.status}\r\n                    </span>\r\n                </div>\r\n            }\r\n\r\n            {\r\n                editMode &&\r\n                <div>\r\n                    <input  onBlur={() => deactivateEditMode(status)}\r\n                           onChange={(e) => setStatus(e.currentTarget.value)} autoFocus value={status}/>\r\n                </div>\r\n            }\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n","type PropsType = {\r\n    contact: string | null\r\n    contactValue: string\r\n}\r\nexport const Contact = ({contact, contactValue}: PropsType) => {\r\n    return <div style={{paddingLeft: '15px'}}>\r\n        <b>{contact}</b>: {contactValue}\r\n    </div>\r\n}","import {useForm} from \"react-hook-form\";\r\nimport React from \"react\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport {editProfileError, ProfileType, updateProfileThunk} from \"../../../redux/profileReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../../redux/reduxStore\";\r\nimport SuperButton from \"../../common/SuperButton/SuperButton\";\r\nimport s from './ProfileInfo.module.css'\r\n\r\n\r\nexport type ProfileDataFormProps = {\r\n    updateStatus: (status: string) => void\r\n    status: string\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n\r\n}\r\ntype FormInputs = {\r\n    fullName: string\r\n    aboutMe: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    contacts: {\r\n        github: string\r\n        vk: string\r\n        facebook: string\r\n        instagram: string\r\n        twitter: string\r\n        website: string\r\n        youtube: string\r\n        mainLink: string\r\n    }\r\n\r\n}\r\nexport const ProfileDataForm = ({updateStatus, status, profile, isOwner}: ProfileDataFormProps) => {\r\n    let contacts = profile.contacts\r\n\r\n    const fullName = useSelector<AppStoreType, string>((state) => state.profilePage.profile.fullName)\r\n    const aboutME = useSelector<AppStoreType, string>((state) => state.profilePage.profile.aboutMe)\r\n    const lookingForaJob = useSelector<AppStoreType, boolean>((state) => state.profilePage.profile.lookingForAJob)\r\n    const lookingForaJobDescription = useSelector<AppStoreType, string>((state) => state.profilePage.profile.lookingForAJobDescription)\r\n    const userContacts = useSelector((state: AppStoreType) => state.profilePage.profile.contacts)\r\n    const profileError = useSelector((state: AppStoreType) => state.profilePage.editProfileError)\r\n\r\n    const dispatch = useDispatch()\r\n    const {register, handleSubmit} = useForm<FormInputs>({\r\n        mode: 'onSubmit',\r\n        reValidateMode: 'onChange',\r\n        defaultValues: {\r\n            fullName: fullName,\r\n            aboutMe: aboutME,\r\n            lookingForAJob: lookingForaJob,\r\n            lookingForAJobDescription: lookingForaJobDescription,\r\n            contacts: userContacts\r\n\r\n        },\r\n    })\r\n    const onSubmit = (data: any) => {\r\n        dispatch(updateProfileThunk(data))\r\n    }\r\n\r\n    return (\r\n\r\n        <form className={s.profileInfoWrapper} onSubmit={handleSubmit(onSubmit)}\r\n              onChange={() => dispatch(editProfileError(''))}>\r\n            <div>\r\n                <b>FullName</b>: <input className={s.profileDataFormInputs} {...register(\"fullName\")} />\r\n            </div>\r\n            <ProfileStatus isOwner={isOwner} status={status} updateStatus={updateStatus}/>\r\n            <div>\r\n                <b>About me</b>: <input className={s.profileDataFormInputs} {...register(\"aboutMe\")} />\r\n            </div>\r\n\r\n            <div>\r\n                <b>Looking for a job</b>: <input type={'checkbox'} {...register(\"lookingForAJob\")} />\r\n            </div>\r\n\r\n            <div>\r\n                <b>My professional skills</b>:\r\n                <div>\r\n                    <textarea style={{\r\n                        width: '264px',\r\n                        height: '100px',\r\n                        resize: 'none',\r\n                        outline: \"none\",\r\n                        border: \"none\"\r\n                    }} {...register('lookingForAJobDescription')} />\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div>\r\n                <b>Contacts</b>:{Object.entries(contacts).map(([key, value], index) =>\r\n                <div>{key}:\r\n                    <input key={index}\r\n                           className={s.profileDataFormInputs} {...register('contacts.' + key as keyof FormInputs)}\r\n                           type=\"text\"/>\r\n                </div>\r\n            )}\r\n                {profileError && (\r\n                    <div className={s.errorMessage}>\r\n                        {profileError}\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <SuperButton type={'submit'}>save</SuperButton>\r\n        </form>\r\n    );\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {editModeProfileInfo, ProfileType} from \"../../../redux/profileReducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from \"./../../../images/user.png\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport {Contact} from \"./Contact/Contact\";\r\nimport {ProfileDataForm} from \"./ProfileDataForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../../redux/reduxStore\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    updatePhoto: (photo: string) => void\r\n\r\n}\r\nexport type ProfileDataProps = {\r\n    updateStatus: (status: string) => void\r\n    status: string\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n\r\n}\r\n\r\n\r\nfunction ProfileInfo({profile, status, updateStatus, isOwner, updatePhoto}: ProfileInfoType) {\r\n    const dispatch = useDispatch()\r\n    const editMode = useSelector((state: AppStoreType) => state.profilePage.profileInfoEditMode)\r\n    const activateEditMode = () => dispatch(editModeProfileInfo(true))\r\n    if (!Object.keys(profile).length) {\r\n        return <div>\r\n            <Preloader/>\r\n        </div>\r\n    }\r\n\r\n\r\n    const savePhotoHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            updatePhoto(e.target.files[0].name)\r\n        }\r\n    }\r\n\r\n    return <div className={s.container}>\r\n\r\n        <div className={s.profileWrapper}>\r\n            <div className={s.profileAvatarWrapper}>\r\n                <img alt={'profileImage'} className={s.image} src={profile.photos.large || userPhoto}/>\r\n                {\r\n                    isOwner\r\n                    && <div style={{padding: '10px', display: \"flex\", flexDirection: 'column', marginLeft: '20px'}}>\r\n                        <input onChange={savePhotoHandler} id={'img'} style={{marginLeft: '50px', display: 'none'}}\r\n                               type=\"file\"/>\r\n                        <label htmlFor='img'> updatePhoto</label>\r\n                        <button className={s.editProfile} onClick={() => activateEditMode()}>changeProfile</button>\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n            <div className={s.text}>\r\n                {editMode ?\r\n                    <ProfileDataForm updateStatus={updateStatus} profile={profile} status={status} isOwner={isOwner}/>\r\n                    :\r\n                    <ProfileData updateStatus={updateStatus} status={status} profile={profile} isOwner={isOwner}/>\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n\r\n\r\n    </div>\r\n\r\n}\r\n\r\nconst ProfileData = ({updateStatus, status, profile, isOwner}: ProfileDataProps) => {\r\n    let contacts = profile.contacts\r\n    return <div className={s.profileInfoWrapper}>\r\n\r\n        <div>\r\n            <b>FullName</b>: {profile.fullName}\r\n        </div>\r\n        <ProfileStatus isOwner={isOwner} status={status} updateStatus={updateStatus}/>\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? 'Yes' : 'No'}\r\n        </div>\r\n\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n\r\n        <>\r\n            <b>Contacts</b>:{Object.entries(contacts).map(\r\n            ([key, value], index) =>\r\n                <Contact\r\n                    key={index}\r\n                    contact={key}\r\n                    contactValue={value}/>)}\r\n        </>\r\n\r\n    </div>\r\n}\r\n\r\n\r\nexport default ProfileInfo","import React, { useState } from \"react\";\r\nimport s from \"./Post.module.css\";\r\nimport SuperButton from \"../../../common/SuperButton/SuperButton\";\r\n\r\n\r\n\r\ntype PropsPostType = {\r\n    message: string\r\n    avatar: string\r\n    likeCounts: number\r\n\r\n}\r\n\r\n\r\nfunction Post(props: PropsPostType) {\r\n\r\n    let [count, setCount] = useState(props.likeCounts)\r\n    let dateObj = new Date('December 17, 2021 03:24:00').toLocaleString()\r\n\r\n\r\n    return (\r\n\r\n        <div className={s.item}>\r\n           <div  style={{display:'flex'}}>\r\n               <img alt={'postImage'} src={props.avatar} />\r\n               <div  className={s.info}>\r\n                   <div style={{marginBottom:'5px'}}>\r\n                       <b>Test User</b>\r\n                   </div>\r\n                   <div>{dateObj}</div>\r\n               </div>\r\n           </div>\r\n            <div className={s.text} >{props.message}</div>\r\n\r\n            <div>\r\n                <SuperButton  onClick={() => setCount(count + 1)}> {count} like </SuperButton>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Post","import React from \"react\";\r\nimport {AddPostForm} from \"../../Forms/AddPostOrMessageForm\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport Post from \"./Post/Post\";\r\n\r\n\r\nfunction MyPosts(props: MyPostsPropsType) {\r\n\r\n    let state = props.profilePage\r\n\r\n    let postsElements = state.postData.map(post => <Post key={post.id} message={post.post}\r\n                                                         likeCounts={post.likeCounts} avatar={post.avatar}/>)\r\n\r\n\r\n    return (\r\n        <div className={s.container}>\r\n\r\n            <div className={s.postsWrapper}>\r\n                <h3> My Posts </h3>\r\n                <AddPostForm classNameTextArea={s.textarea} callBack={props.addPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts","import { connect } from \"react-redux\";\r\nimport { addPost, PostDataType } from \"../../../redux/profileReducer\";\r\nimport { AppStoreType } from \"../../../redux/reduxStore\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\n\r\ntype mapStateType = {\r\n    profilePage: MyPostsType\r\n}\r\n\r\ntype MyPostsType = {\r\n    postData: Array<PostDataType>\r\n}\r\n\r\n\r\ntype mapDispatchType = {\r\n    addPost: (text: string) => void\r\n}\r\nexport type MyPostsPropsType = mapStateType & mapDispatchType\r\n\r\nconst mapStateToProps = (state: AppStoreType): mapStateType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, { addPost })(MyPosts)\r\n\r\n\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profileReducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatusThunk: (status: string) => void\r\n    isOwner: boolean\r\n    updatePhotoThunk: (photo: string) => void\r\n}\r\n\r\nfunction Profile({profile, status, updateUserStatusThunk, isOwner,updatePhotoThunk}: ProfilePropsType) {\r\n\r\n    return <div className={`container`}>\r\n        <ProfileInfo updatePhoto={updatePhotoThunk}  isOwner={isOwner} profile={profile} status={status} updateStatus={updateUserStatusThunk}/>\r\n        <MyPostsContainer/>\r\n\r\n    </div>\r\n\r\n}\r\n\r\n\r\nexport default Profile","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {AuthRedirect} from \"../../hoc/AuthRedirect\";\r\nimport {\r\n    getUserProfileThunk,\r\n    getUsersStatusThunk,\r\n    ProfileType,\r\n    updatePhotoThunk,\r\n    updateUserStatusThunk\r\n} from \"../../redux/profileReducer\";\r\nimport {AppStoreType} from \"../../redux/reduxStore\";\r\nimport Profile from \"./Profile\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    profile: ProfileType\r\n    status: string,\r\n    autorizedUserId: number | null\r\n\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfileThunk: (userId: string) => void\r\n    getUsersStatusThunk: (userId: string) => void\r\n    updateUserStatusThunk: (status: string) => void\r\n    updatePhotoThunk: (photo: string) => void\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerType\r\ntype ProfileContainerType = mapStateToPropsType & MapDispatchPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    savePhoto(){\r\n\r\n    }\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n\r\n        if (userId || this.props.autorizedUserId) {\r\n\r\n            userId = userId ?? this.props.autorizedUserId?.toString()\r\n\r\n            this.props.getUserProfileThunk(userId)\r\n            this.props.getUsersStatusThunk(userId)\r\n\r\n        } else {\r\n            this.props.history.push('/login')\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId)\r\n        this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile isOwner={!this.props.match.params.userId} {...this.props} />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStoreType): mapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    autorizedUserId: state.auth.data.id,\r\n})\r\n\r\n\r\nexport default compose<React.ComponentType>(AuthRedirect,\r\n    connect(mapStateToProps, {getUserProfileThunk, getUsersStatusThunk, updateUserStatusThunk, updatePhotoThunk}),\r\n    withRouter\r\n)(ProfileContainer)","import React from 'react'\r\nimport { SubmitHandler, useForm } from 'react-hook-form'\r\nimport SuperButton from \"../common/SuperButton/SuperButton\";\r\nimport s from './AddPostForm.module.css'\r\n\r\ntype FormType = {\r\n    message: string\r\n}\r\n\r\ntype PropsType = {\r\n    callBack: (text: string) => void\r\n    classNameTextArea?: string\r\n    classNameButton?: string\r\n}\r\n\r\n\r\n\r\nexport const AddPostForm = ({callBack,classNameTextArea,classNameButton}:PropsType) => {\r\n\r\n    const { register, handleSubmit, setValue, formState: { errors } } = useForm<FormType>({ mode: 'onChange', })\r\n    const onSubmit: SubmitHandler<FormType> = (data) => {\r\n        callBack(data.message)\r\n        setValue(\"message\", \"\")\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <form className={s.container} onSubmit={handleSubmit(onSubmit)}>\r\n\r\n            <textarea  className={classNameTextArea} {...register('message', {\r\n                required: true, minLength: 1, maxLength: { value: 300, message: 'max length 300' }\r\n            })}\r\n                placeholder={\"Напиши своё сообщение\"} />\r\n            <span>\r\n                {errors.message?.message}\r\n            </span>\r\n\r\n            <div>\r\n                <SuperButton className={classNameButton} >Send</SuperButton>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AddPostForm_container__1XvIi\"};","export default __webpack_public_path__ + \"static/media/user.40a377fa.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ProfileInfo_container__HHQM3\",\"profileInfoWrapper\":\"ProfileInfo_profileInfoWrapper__Z0Vfb\",\"profileWrapper\":\"ProfileInfo_profileWrapper__eTFb2\",\"profileAvatarWrapper\":\"ProfileInfo_profileAvatarWrapper__nbSbC\",\"image\":\"ProfileInfo_image__2RzxG\",\"text\":\"ProfileInfo_text__1x72d\",\"editProfile\":\"ProfileInfo_editProfile__NGLF5\",\"profileDataFormInputs\":\"ProfileInfo_profileDataFormInputs__2jlNj\",\"errorMessage\":\"ProfileInfo_errorMessage__1wBxB\"};"],"sourceRoot":""}