{"version":3,"sources":["component/Dialogs/Dialogs.module.css","component/Dialogs/DialogItem/DialogsItem.module.css","component/Dialogs/DialogItem/DialogsItem.tsx","component/Dialogs/Message/Message.tsx","component/Dialogs/AddMessageForm/AddMessageForm.tsx","component/Dialogs/Dialogs.tsx","component/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","c","dialogs","active","to","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogsPage","DialogsElement","DialogData","map","d","MessageElement","MessageData","m","dialogItem","messages","value","sendMessage","newMessageBody","compose","connect","dispatch","AddMessageAC"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,WAAa,8B,oBCAlED,EAAOC,QAAU,CAAC,WAAa,gCAAgC,OAAS,8B,qICQ3DC,EAAuC,SAACC,GACjD,IAAIC,EAAO,WAAaD,EAAME,GAC9B,OACI,qBAAKC,UAAWC,IAAEC,QAAU,IAAMD,IAAEE,OAApC,SACI,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,U,kBCJzBC,EAAsC,SAACT,GAChD,OAAO,qBAAKG,UAAWC,IAAEM,QAAlB,SAA4BV,EAAMU,W,iCCFvCC,EAAcC,YAAiB,IAaxBC,EAAsBC,YAA+B,CAACC,KAAM,wBAAtCD,EAXuC,SAACd,GACvE,OAAO,uBAAMgB,SAAUhB,EAAMiB,aAAtB,UACH,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAUX,GAAcH,KAAM,iBAC9De,YAAa,yBAExB,8BACI,0DC0BGC,EA3B4B,SAACxB,GACxC,IAAIyB,EAAQzB,EAAM0B,YACZC,EAAiBF,EAAMG,WAAWC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAuB5B,GAAI4B,EAAE5B,GAAIM,KAAMsB,EAAEtB,MAAxBsB,EAAE5B,OAC9D6B,EAAiBN,EAAMO,YAAYH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAoBvB,QAASuB,EAAEvB,SAAjBuB,EAAE/B,OAMlE,OACI,sBAAKC,UAAWC,IAAEC,QAAlB,UACI,qBAAKF,UAAWC,IAAE8B,WAAlB,SACKP,IAEL,qBAAKxB,UAAWC,IAAE+B,SAAlB,SACKJ,IAEL,8BACI,cAAClB,EAAD,CAAqBG,SAbX,SAACoB,GACnBpC,EAAMqC,YAAYD,EAAME,yB,gBCejBC,sBAAkDC,aAb3C,SAACf,GACnB,MAAM,CACFC,YAAaD,EAAMC,gBAGF,SAACe,GACtB,MAAM,CACFJ,YAAY,SAACC,GACTG,EAASC,YAAaJ,SAKnBC,CAA+Ff","file":"static/js/4.d7dc9e71.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2-jPA\",\"dialogItem\":\"Dialogs_dialogItem__1Ewue\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogItem\":\"DialogsItem_dialogItem__Ut-Ff\",\"active\":\"DialogsItem_active__pjMAy\"};","import React from 'react';\r\nimport c from './DialogsItem.module.css';\r\nimport {NavLink} from 'react-router-dom'\r\n\r\ntype DialogItemType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport const DialogItem: React.FC<DialogItemType> = (props) => {\r\n    let path = '/dialog/' + props.id\r\n    return (\r\n        <div className={c.dialogs + ' ' + c.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport c from './Message.module.css';\r\n\r\n\r\ntype MessagesItemType = {\r\n    message: string\r\n}\r\n\r\n\r\nexport const Message: React.FC<MessagesItemType> = (props) => {\r\n    return <div className={c.message}>{props.message}</div>\r\n}\r\n","import {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../commen/FormControls/FormControls\";\r\n\r\nexport type AddMessagePropsType = {\r\n    newMessageBody: string,\r\n}\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\n const AddMessageForm: React.FC<InjectedFormProps<AddMessagePropsType>> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea} validate={[required, maxLength50]} name={'newMessageBody'}\r\n                   placeholder={'Enter your message'}/>\r\n        </div>\r\n        <div>\r\n            <button>send message</button>\r\n        </div>\r\n    </form>\r\n}\r\nexport const AddMessageFormRedux = reduxForm<AddMessagePropsType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from 'react';\r\nimport c from './Dialogs.module.css';\r\nimport {DialogItem} from \"./DialogItem/DialogsItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {dialogsPageType} from \"./DialogsContainer\";\r\nimport {InitialAuthStateType} from \"../../Redax/auth-reducer\";\r\nimport {AddMessageFormRedux, AddMessagePropsType} from \"./AddMessageForm/AddMessageForm\";\r\n\r\n\r\ntype PropsDialogType = {\r\n    dialogsPage: dialogsPageType,\r\n    InitialAuthState: InitialAuthStateType,\r\n    updateNewMessageBody: (body: string) => void,\r\n    sendMessage: (newMessageBody: string) => void,\r\n}\r\n\r\nconst Dialogs: React.FC<PropsDialogType> = (props) => {\r\n    let state = props.dialogsPage\r\n    const DialogsElement = state.DialogData.map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>)\r\n    const MessageElement = state.MessageData.map(m => <Message key={m.id} message={m.message}/>)\r\n\r\n    const addNewMessage = (value: AddMessagePropsType) => {\r\n        props.sendMessage(value.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={c.dialogs}>\r\n            <div className={c.dialogItem}>\r\n                {DialogsElement}\r\n            </div>\r\n            <div className={c.messages}>\r\n                {MessageElement}\r\n            </div>\r\n            <div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;\r\n","import React from 'react';\r\nimport {AddMessageAC} from \"../../Redax/dialogsPage-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType, Types} from \"../../Redax/redux-store\";\r\nimport WithAuthRedirect from \"../../HOC/withAuthRedirect\";\r\nimport { compose } from 'redux';\r\n\r\ntype DialogDataType = {\r\n    id: number,\r\n    name: string,\r\n}\r\nexport type MessageType = {\r\n    id: number,\r\n    message: string,\r\n}\r\nexport type dialogsPageType = {\r\n    MessageData: MessageType[],\r\n    DialogData: DialogDataType[],\r\n    newMessage: string,\r\n}\r\ntype MapStateToPropsType={\r\n    dialogsPage:dialogsPageType,\r\n}\r\nconst mapStateToProps=(state:AppStateType):MapStateToPropsType=>{\r\n    return{\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nconst mapDispatchToProps=(dispatch:(action: Types) => void)=>{\r\n    return{\r\n        sendMessage:(newMessageBody:string)=>{\r\n            dispatch(AddMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(/*WithAuthRedirect,*/connect(mapStateToProps,mapDispatchToProps))(Dialogs);\r\n\r\n\r\n"],"sourceRoot":""}