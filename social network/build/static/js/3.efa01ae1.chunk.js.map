{"version":3,"sources":["assets/images/User-Profile.png","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","component/Profile/ProfileInfo/ProfileInfo.module.css","component/Profile/Myposts/MyPosts.module.css","component/Profile/Myposts/Post/Posts.module.css","component/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","component/Profile/ProfileInfo/ProfileInfo.tsx","component/Profile/Myposts/Post/Post.tsx","component/Profile/Myposts/MyPosts.tsx","component/Profile/Myposts/MyPostsContainer.tsx","component/Profile/Profile.tsx","component/Profile/ProfileContainer.tsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","ProfileStatusHook","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","ProfileInfo","profilePage","Preloader","className","c","profileInfo","src","profile","photos","large","userPhoto","mainPhoto","isOwner","type","target","files","savePhoto","Post","alt","message","likeCount","MyPosts","React","memo","PostsElement","PostsData","map","p","likesCount","AddPostFormRedux","onSubmit","newText","addPost","updateNewPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","connect","state","newPostText","messageNewPostText","dispatch","postMessage","addPostAC","Profile","getStatus","MyPostsContainer","ProfileContainer","userId","this","match","params","authorizedUserId","history","getUsersProfile","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","id","withRouter"],"mappings":"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","file":"static/js/3.efa01ae1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/User-Profile.00f4f37b.png\";","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"ProfileInfo_profile__3ne12\",\"mainPhoto\":\"ProfileInfo_mainPhoto__EsD7A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"MyPosts_profile__2H0GE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Posts_profile__2-DuL\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport c from './ProfileInfo.module.css'\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusHook: React.FC<ProfileStatusPropsType> = (props) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(!editMode)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (<div>\r\n            <div>\r\n                {!editMode &&\r\n                <span onDoubleClick={activateEditMode}>{props.status || '----'}</span>}\r\n            </div>\r\n            <div>\r\n                {editMode &&\r\n                <input onChange={onStatusChange} autoFocus onBlur={deactivateEditMode}\r\n                       value={status}/>}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport c from './ProfileInfo.module.css'\r\nimport Preloader from \"../../commen/Preloader/Preloader\";\r\nimport {InitialStateType} from \"../../../Redax/profile-reducer\";\r\nimport userPhoto from \"../../../assets/images/User-Profile.png\"\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport {ProfileStatusHook} from \"./ProfileStatusWithHooks\";\r\n\r\ntype FileType = {\r\n    lastModified: number\r\n    lastModifiedDate: string\r\n    name: string\r\n    size: number\r\n    type: string\r\n    webkitRelativePath: string\r\n}\r\n\r\ntype ProfileInfoPropsType = {\r\n    profilePage: InitialStateType | null,\r\n    getStatus: (userId: string) => void,\r\n    updateStatus: (status: string) => void,\r\n    isOwner: boolean,\r\n    savePhoto?: any\r\n}\r\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    if (!props.profilePage) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    return (\r\n        <div className={c.profileInfo}>\r\n            <div>\r\n                {/*   <img\r\n                    src={'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQHgJ5gGZuqtluFKjVRaCEEmoWihm4LmHuwrw&usqp=CAU'}/>*/}\r\n            </div>\r\n            <div>\r\n                <img src={props.profilePage.profile.photos.large || userPhoto} className={c.mainPhoto}/>\r\n                {props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n                {/*<ProfileStatus status={props.profilePage.status}updateStatus={props.updateStatus}/>*/}\r\n                <ProfileStatusHook status={props.profilePage.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport c from './Posts.module.css'\r\n\r\ntype messageType = {\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nconst Post: React.FC<messageType> = (props) => {\r\n    return (\r\n        <div className={c.profile}>\r\n            <img src=\"https://meragor.com/files/styles//ava_800_800_wm/_big-and-goofy-smile_0.jpg\" alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>{props.likeCount} like</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Post;","import React from 'react';\r\nimport c from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../commen/FormControls/FormControls\";\r\n\r\n\r\nexport type PostsDataType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\ntype PropsType = {\r\n    PostsData: PostsDataType[]\r\n    newPostText: string\r\n    addPost: (postMessage: string) => void\r\n}\r\n\r\n\r\nconst MyPosts: React.FC<PropsType> =React.memo( (props) => {\r\n    const PostsElement = props.PostsData.map(p => <Post message={p.message} likeCount={p.likesCount}/>)\r\n\r\n    const onAddPost = (newText: AddPostPropsType) => {\r\n        props.addPost(newText.updateNewPostText)\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={c.profile}>\r\n\r\n                <div>\r\n                    <img src=\"https://meragor.com/files/styles//ava_800_800_wm/_big-and-goofy-smile_0.jpg\" alt=\"\"/>\r\n                    ava\r\n                </div>\r\n                <div>\r\n                    <AddPostFormRedux onSubmit={onAddPost}/>\r\n                </div>\r\n            </div>\r\n            {PostsElement}\r\n        </div>);\r\n})\r\n\r\ntype AddPostPropsType = {\r\n    updateNewPostText: string,\r\n}\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddPostPropsType>> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea} name={'updateNewPostText'} placeholder={'Enter new post'}\r\n                   validate={[required, maxLength10]}/>\r\n            <button>Create Post</button>\r\n        </div>\r\n    </form>\r\n}\r\nconst AddPostFormRedux = reduxForm<AddPostPropsType>({form: 'myPostAddMessageForm'})(AddNewPostForm)\r\n\r\nexport default MyPosts;\r\n","import React from 'react';\r\nimport {addPostAC} from \"../../../Redax/profile-reducer\";\r\nimport MyPosts, {PostsDataType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Types} from \"../../../Redax/redux-store\";\r\nimport { RootStateType} from \"../../../Redax/store\";\r\n\r\n\r\ntype MapStateToPropsType={\r\n    PostsData:Array<PostsDataType>,\r\n    newPostText:string,\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType):MapStateToPropsType => {\r\n    return {\r\n        PostsData: state.profilePage.PostsData,\r\n        newPostText: state.profilePage.messageNewPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: (action: Types) => void) => {\r\n    return {\r\n        addPost: (postMessage: string) => {\r\n            dispatch(addPostAC(postMessage))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n\r\n","import React from 'react';\r\nimport c from './Profile.module.css';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./Myposts/MyPostsContainer\";\r\nimport {InitialStateType} from \"../../Redax/profile-reducer\";\r\n\r\ntype ProfileProps = {\r\n    profilePage: InitialStateType | null,\r\n    getStatus: (userId: string) => void,\r\n    updateStatus: (status: string) => void,\r\n    isOwner:boolean,\r\n    savePhoto?:any\r\n}\r\nconst Profile: React.FC<ProfileProps> = ({profilePage, getStatus, updateStatus,isOwner,savePhoto}) => {\r\n    return (\r\n        <div className={c.profile}>\r\n            <ProfileInfo profilePage={profilePage} getStatus={getStatus} updateStatus={updateStatus} isOwner={isOwner} savePhoto={savePhoto}/>\r\n            <MyPostsContainer/>\r\n        </div>);\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUsersProfile, InitialStateType, savePhoto, updateStatus,} from \"../../Redax/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../Redax/redux-store\";\r\nimport {compose} from 'redux';\r\n\r\n\r\ntype MathParamsType = {\r\n    userId: string,\r\n}\r\ntype MapStatePropsType = {\r\n    profilePage: InitialStateType | null,\r\n    authorizedUserId: number | null,\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUsersProfile: (userId: string) => void,\r\n    getStatus: (userId: string) => void,\r\n    updateStatus: (status: string) => void,\r\n    savePhoto:any,\r\n}\r\ntype ProfileContainerPropsType = MapStatePropsType & MapDispatchPropsType\r\ntype PropsType = RouteComponentProps<MathParamsType> & ProfileContainerPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            let userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push(('/login'))\r\n            }\r\n        }\r\n        this.props.getUsersProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: any, prevState: any, snapshot: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} profilePage={this.props.profilePage} getStatus={this.props.getStatus}\r\n                         updateStatus={this.props.updateStatus} isOwner={!this.props.match.params.userId}\r\n                         savePhoto={this.props.savePhoto}/>\r\n            </div>);\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profilePage: state.profilePage,\r\n    authorizedUserId: state.auth.id,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUsersProfile, updateStatus, getStatus,savePhoto}),\r\n    withRouter)(ProfileContainer)"],"sourceRoot":""}